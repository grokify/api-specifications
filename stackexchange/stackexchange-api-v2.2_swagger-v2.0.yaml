---
  swagger: "2.0"
  info:
    description: Stack Exchange API
    version: "2.2"
    title: "Stack Exchange API"
    termsOfService: "https://stackoverflow.com/legal/api-terms-of-use"
  host: "api.stackexchange.com"
  basePath: "/2.2"
  schemes:
    - "https"
  tags:
    -
      name: "Questions"
    -
      name: "Users"
      description: "All user methods that take an {ids} parameter have a /me equivalent method that takes an access_token instead. These methods are provided for developer convenience, with the exception of plain /me, which is actually necessary for discovering which user authenticated to an application."
  paths:
    /questions:
      get:
        tags:
          - "Questions"
        description: "Gets all the questions on the site.\nThis method allows you make fairly flexible queries across the entire corpus of questions on a site."
        produces:
          - "application/json"
        parameters:
          -
            name: "fromdate"
            in: "query"
            required: false
            type: "integer"
          -
            name: "todate"
            in: "query"
            required: false
            type: "integer"
          -
            name: "min"
            in: "query"
            required: false
            type: "integer"
          -
            name: "max"
            in: "query"
            required: false
            type: "integer"
          -
            name: "tagged"
            in: "query"
            required: false
            type: "string"
          -
            name: "order"
            in: "query"
            required: false
            type: "string"
            enum:
              - desc
              - asc
          -
            name: "sort"
            in: "query"
            required: false
            type: "string"
            enum:
              - activity
              - votes
              - creation
              - hot
              - week
              - month
          -
            name: "page"
            in: "query"
            required: false
            type: "integer"
          -
            name: "pagesize"
            in: "query"
            required: false
            type: "integer"
          -
            name: "site"
            in: "query"
            required: true
            default: "stackoverflow"
            type: "string"
        responses:
          default:
            description: "Success"
            schema:
              $ref: "#/definitions/QuestionsResponse"
    /questions/featured:
      get:
        tags:
          - "Questions"
        description: "Gets all the questions on the site.\nThis method allows you make fairly flexible queries across the entire corpus of questions on a site."
        produces:
          - "application/json"
        parameters:
          -
            name: "fromdate"
            in: "query"
            required: false
            type: "integer"
          -
            name: "todate"
            in: "query"
            required: false
            type: "integer"
          -
            name: "min"
            in: "query"
            required: false
            type: "integer"
          -
            name: "max"
            in: "query"
            required: false
            type: "integer"
          -
            name: "tagged"
            in: "query"
            required: false
            type: "string"
          -
            name: "order"
            in: "query"
            required: false
            type: "string"
            enum:
              - desc
              - asc
          -
            name: "sort"
            in: "query"
            required: false
            type: "string"
            enum:
              - activity
              - votes
              - creation
          -
            name: "page"
            in: "query"
            required: false
            type: "integer"
          -
            name: "pagesize"
            in: "query"
            required: false
            type: "integer"
          -
            name: "site"
            in: "query"
            required: true
            default: "stackoverflow"
            type: "string"
        responses:
          default:
            description: "Success"
            schema:
              $ref: "#/definitions/QuestionsResponse"
    /questions/no-answers:
      get:
        tags:
          - "Questions"
        description: "Returns questions which have received no answers.\nCompare with /questions/unanswered which merely returns questions that the sites consider insufficiently well answered."
        produces:
          - "application/json"
        parameters:
          -
            name: "fromdate"
            in: "query"
            required: false
            type: "integer"
          -
            name: "todate"
            in: "query"
            required: false
            type: "integer"
          -
            name: "min"
            in: "query"
            required: false
            type: "integer"
          -
            name: "max"
            in: "query"
            required: false
            type: "integer"
          -
            name: "tagged"
            in: "query"
            required: false
            type: "string"
          -
            name: "order"
            in: "query"
            required: false
            type: "string"
            enum:
              - desc
              - asc
          -
            name: "sort"
            in: "query"
            required: false
            type: "string"
            enum:
              - activity
              - votes
              - creation
          -
            name: "page"
            in: "query"
            required: false
            type: "integer"
          -
            name: "pagesize"
            in: "query"
            required: false
            type: "integer"
          -
            name: "site"
            in: "query"
            required: true
            default: "stackoverflow"
            type: "string"
        responses:
          default:
            description: "Success"
            schema:
              $ref: "#/definitions/QuestionsResponse"
    /questions/unanswered:
      get:
        tags:
          - "Questions"
        description: "Gets all the questions on the site.\nThis method allows you make fairly flexible queries across the entire corpus of questions on a site."
        produces:
          - "application/json"
        parameters:
          -
            name: "fromdate"
            in: "query"
            required: false
            type: "integer"
          -
            name: "todate"
            in: "query"
            required: false
            type: "integer"
          -
            name: "min"
            in: "query"
            required: false
            type: "integer"
          -
            name: "max"
            in: "query"
            required: false
            type: "integer"
          -
            name: "tagged"
            in: "query"
            required: false
            type: "string"
          -
            name: "order"
            in: "query"
            required: false
            type: "string"
            enum:
              - desc
              - asc
          -
            name: "sort"
            in: "query"
            required: false
            type: "string"
            enum:
              - activity
              - votes
              - creation
          -
            name: "page"
            in: "query"
            required: false
            type: "integer"
          -
            name: "pagesize"
            in: "query"
            required: false
            type: "integer"
          -
            name: "site"
            in: "query"
            required: true
            default: "stackoverflow"
            type: "string"
        responses:
          default:
            description: "Success"
            schema:
              $ref: "#/definitions/QuestionsResponse"
    /users/{userIds}/reputation:
      get:
        tags:
          - "Users"
        description: "Gets a subset of the reputation changes for users in {ids}.\nReputation changes are intentionally scrubbed of some data to make it difficult to correlate votes on particular posts with user reputation changes. That being said, this method returns enough data for reasonable display of reputation trends.\n{ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for user_id on user or shallow_user objects.\nThis method returns a list of reputation objects."
        operationId: getUsersReputation
        produces:
          - "application/json"
        parameters:
          -
            name: "userIds"
            in: "path"
            required: true
            type: "string"
          -
            name: "fromdate"
            in: "query"
            required: false
            type: "integer"
          -
            name: "todate"
            in: "query"
            required: false
            type: "integer"
          -
            name: "page"
            in: "query"
            required: false
            type: "integer"
          -
            name: "pagesize"
            in: "query"
            required: false
            type: "integer"
          -
            name: "site"
            in: "query"
            required: true
            default: "stackoverflow"
            type: "string"
        responses:
          default:
            description: "Success"
            schema:
              $ref: "#/definitions/ReputationResponse"
    /me/reputation:
      tags:
        - "Users"
      description: "Returns the reputation changed for the user associated with the given access_token.\n\nThis method returns a list of [reputation changes](https://api.stackexchange.com/docs/types/reputation)."
      operationId: getMyReputation
      responses:
        default:
          description: "Success"
          schema:
            $ref: "#/definitions/ReputationResponse"
    /users/{userIds}/reputation-history:
      get:
        tags:
          - "Users"
        description: "Returns users' public reputation history.\nThis method returns a list of reputation_history."
        operationId: getUsersReputationHistory
        produces:
          - "application/json"
        parameters:
          -
            name: "userIds"
            in: "path"
            required: true
            type: "string"
          -
            name: "page"
            in: "query"
            required: false
            type: "integer"
          -
            name: "pagesize"
            in: "query"
            required: false
            type: "integer"
          -
            name: "site"
            in: "query"
            required: true
            default: "stackoverflow"
            type: "string"
        responses:
          default:
            description: "Success"
            schema:
              $ref: "#/definitions/ReputationHistoryResponse"
    /me/reputation-history:
      get:
        tags:
          - "Users"
        description: "Returns user's public reputation history.\n\nThis method returns a list of [reputation_history](https://api.stackexchange.com/docs/types/reputation-history)."
        produces:
          - "application/json"
        parameters:
          -
            name: "page"
            in: "query"
            required: false
            type: "integer"
          -
            name: "pagesize"
            in: "query"
            required: false
            type: "integer"
        responses:
          default:
            description: "Success"
            schema:
              $ref: "#/definitions/ReputationHistoryResponse"
  definitions:
    QuestionsResponse:
      type: "object"
      properties:
        items:
          type: "array"
          description: "A list of questions."
          items:
            $ref: "#/definitions/Question"
        has_more:
          type: "boolean"
        quota_max:
          type: "integer"
        quota_remaining:
          type: "integer"
    Question:
      type: "object"
      properties:
        tags:
          type: "array"
          items:
            type: "string"
        owner:
          $ref: "#/definitions/QuestionOwner"
        is_answered:
          type: "boolean"
        view_count:
          type: "integer"
        answer_count:
          type: "integer"
        score:
          type: "integer"
        last_activity_date:
          type: "integer"
        creation_date:
          type: "integer"
        question_id:
          type: "integer"
        link:
          type: "string"
        title:
          type: "string"
    QuestionOwner:
      type: "object"
      properties:
        reputation:
          type: "integer"
        user_id:
          type: "integer"
        user_type:
          type: "string"
        profile_image:
          type: "string"
        display_name:
          type: "string"
        link:
          type: "string"
    ReputationResponse:
      type: "object"
      properties:
        items:
          type: "array"
          description: "A list of reputation_history."
          items:
            $ref: "#/definitions/ReputationChange"
        has_more:
          type: "boolean"
        quota_max:
          type: "integer"
        quota_remaining:
          type: "integer"
    ReputationChange:
      type: "object"
      properties:
        on_date:
          type: "integer"
        reputation_change:
          type: "integer"
        vote_type:
          type: "string"
          enum:
           - accepts
           - bounties_won
           - down_votes
           - up_votes
        post_type:
          type: "string"
        post_id:
          type: "integer"
        user_id:
          type: "integer"
    ReputationHistoryResponse:
      type: "object"
      properties:
        items:
          type: "array"
          description: "A list of reputation_history."
          items:
            $ref: "#/definitions/ReputationHistory"
        has_more:
          type: "boolean"
        quota_max:
          type: "integer"
        quota_remaining:
          type: "integer"
    ReputationHistory:
      type: "object"
      properties:
        reputation_history_type:
          type: "string"
        reputation_change:
          type: "integer"
        post_id:
          type: "integer"
        creation_date:
          type: "integer"
        user_id:
          type: "integer"
{
  "swagger": "2.0",
  "info": {
    "version": "v2.2",
    "title": "Insightly API v2.2"
  },
  "host": "api.insight.ly",
  "basePath": "/v2.2",
  "schemes": [
    "https"
  ],
  "paths": {
    "/ActivitySets": {
      "get": {
        "tags": [
          "ActivitySets"
        ],
        "summary": "Gets a list of Activity Sets",
        "operationId": "GetActivitySets",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the activity set.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of activity sets to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of activity sets to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "ActivitySet",
                "type": "object",
                "properties": {
                  "ACTIVITYSET_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "NAME": {
                    "type": "string"
                  },
                  "FOR_CONTACTS": {
                    "type": "boolean"
                  },
                  "FOR_ORGANISATIONS": {
                    "type": "boolean"
                  },
                  "FOR_OPPORTUNITIES": {
                    "type": "boolean"
                  },
                  "FOR_PROJECTS": {
                    "type": "boolean"
                  },
                  "FOR_LEADS": {
                    "type": "boolean"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "ACTIVITIES": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIActivity"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/ActivitySets/{id}": {
      "get": {
        "tags": [
          "ActivitySets"
        ],
        "summary": "Gets a single Activity Set",
        "operationId": "GetActivitySet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Activity Set's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "ActivitySet",
              "type": "object",
              "properties": {
                "ACTIVITYSET_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "NAME": {
                  "type": "string"
                },
                "FOR_CONTACTS": {
                  "type": "boolean"
                },
                "FOR_ORGANISATIONS": {
                  "type": "boolean"
                },
                "FOR_OPPORTUNITIES": {
                  "type": "boolean"
                },
                "FOR_PROJECTS": {
                  "type": "boolean"
                },
                "FOR_LEADS": {
                  "type": "boolean"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "ACTIVITIES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIActivity"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "404": {
            "description": "Activity Set not found."
          }
        },
        "deprecated": false
      }
    },
    "/Comments/{id}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Gets a Comment",
        "operationId": "GetComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Comments's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Comment",
              "type": "object",
              "properties": {
                "COMMENT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "BODY": {
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "EMAIL_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TASK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Invalid api key provided."
          },
          "403": {
            "description": "API User does not have access to Comment."
          },
          "404": {
            "description": "Comment not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Deletes a Comment",
        "operationId": "DeleteComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Comment's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Invalid api key provided."
          },
          "403": {
            "description": "API User does not have access to Comment."
          },
          "404": {
            "description": "Comment not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Comments": {
      "put": {
        "tags": [
          "Comments"
        ],
        "summary": "Updates a Comment",
        "operationId": "UpdateComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiComment",
            "in": "body",
            "description": "The Comment to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIComment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment updated.",
            "schema": {
              "title": "Comment",
              "type": "object",
              "properties": {
                "COMMENT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "BODY": {
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "EMAIL_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TASK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Invalid api key provided."
          },
          "403": {
            "description": "API User does not have access to Comment."
          },
          "404": {
            "description": "Comment not found."
          }
        },
        "deprecated": false
      }
    },
    "/Comments/{id}/FileAttachments": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Gets a Comments's File Attachments",
        "operationId": "GetFileAttachments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Comments's ID (COMMENT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when file attachment was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of file attachments to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of file attachments to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "FileAttachment",
                "required": [
                  "FILE_NAME",
                  "CONTENT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "FILE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_NAME": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CONTENT_TYPE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FILE_SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "URL": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Invalid api key provided."
          },
          "403": {
            "description": "API User does not have access to Comment."
          },
          "404": {
            "description": "Comment not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Adds a File Attachment to a Comment",
        "operationId": "AddFileAttachment",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "File and metadata to be attached to Comment",
            "required": true,
            "schema": {},
            "type": "file"
          },
          {
            "name": "file_name",
            "in": "formData",
            "type": "string",
            "maxLength": 500
          },
          {
            "name": "content_type",
            "in": "formData",
            "type": "string",
            "maxLength": 255
          },
          {
            "name": "file_category_id",
            "in": "formData",
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "File Attachment added.",
            "schema": {
              "title": "FileAttachment",
              "required": [
                "FILE_NAME",
                "CONTENT_TYPE"
              ],
              "type": "object",
              "properties": {
                "FILE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_NAME": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CONTENT_TYPE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FILE_SIZE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "URL": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Invalid api key provided."
          },
          "402": {
            "description": "Record or storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Comment."
          },
          "404": {
            "description": "Comment not found."
          },
          "417": {
            "description": "File Attachment insert failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/Search": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a filtered list of Contacts.",
        "description": "Only one optional parameter (excluding brief, top, skip and count_total) can be specified. Simple object graphs (excluding ADDRESSES, CONTACTINFOS, etc.) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetContactsBySearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Optional, email address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Optional, a single tag. Performs an exact match.",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone_number",
            "in": "query",
            "description": "Optional, phone number.",
            "required": false,
            "type": "string"
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "Optional, first name of the contact.",
            "required": false,
            "type": "string"
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Optional, last name of the contact.",
            "required": false,
            "type": "string"
          },
          {
            "name": "city",
            "in": "query",
            "description": "Optional, name of the city from contact address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Optional, state from the contact address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "postcode",
            "in": "query",
            "description": "Optional, postal code from the contact address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Optional, name of the country from contact address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "organisation",
            "in": "query",
            "description": "Optional, name of the default organisation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when contact was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the contact.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of contacts to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of contacts to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Contact",
                "type": "object",
                "properties": {
                  "CONTACT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "SALUTATION": {
                    "maxLength": 50,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FIRST_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LAST_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BACKGROUND": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "IMAGE_URL": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DEFAULT_LINKED_ORGANISATION": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "CUSTOMFIELDS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APICustomField"
                    }
                  },
                  "ADDRESSES": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIAddress"
                    }
                  },
                  "CONTACTINFOS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIContactInfo"
                    }
                  },
                  "DATES": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIContactDate"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "LINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APILink"
                    }
                  },
                  "CONTACTLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIContactLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  },
                  "SOCIAL_LINKEDIN": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SOCIAL_FACEBOOK": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SOCIAL_TWITTER": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ASSISTANT_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a list of Contacts.",
        "description": "Simple object graphs (excluding ADDRESSES, CONTACTINFOS, etc.) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetContacts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the contact.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of contacts to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of contacts to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional,true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Contact",
                "type": "object",
                "properties": {
                  "CONTACT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "SALUTATION": {
                    "maxLength": 50,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FIRST_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LAST_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BACKGROUND": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "IMAGE_URL": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DEFAULT_LINKED_ORGANISATION": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "CUSTOMFIELDS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APICustomField"
                    }
                  },
                  "ADDRESSES": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIAddress"
                    }
                  },
                  "CONTACTINFOS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIContactInfo"
                    }
                  },
                  "DATES": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIContactDate"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "LINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APILink"
                    }
                  },
                  "CONTACTLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIContactLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  },
                  "SOCIAL_LINKEDIN": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SOCIAL_FACEBOOK": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SOCIAL_TWITTER": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ASSISTANT_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates a Contact",
        "description": "If you have trouble updating a contact, try accessing the contact via the GET request to inspect its fields and sub-elements. A common source of            problems with write/update requests occurs when users either omit required fields, or insert invalid data into a field (for example, by referring a            CATEGORY_ID or LINK_ID which does not exist.",
        "operationId": "UpdateContact",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiContact",
            "in": "body",
            "description": "A Contact, just include the JSON object as the request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIContact"
            }
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if you wish to do a partial update containing only top level properties of the Contact. When true, all sub-collections are ignored.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Contact updated.",
            "schema": {
              "title": "Contact",
              "type": "object",
              "properties": {
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SALUTATION": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "FIRST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "LAST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "BACKGROUND": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DEFAULT_LINKED_ORGANISATION": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "ADDRESSES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIAddress"
                  }
                },
                "CONTACTINFOS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactInfo"
                  }
                },
                "DATES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactDate"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CONTACTLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                },
                "SOCIAL_LINKEDIN": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_FACEBOOK": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_TWITTER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ASSISTANT_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds a Contact",
        "description": "If you have trouble with creating a contact, try creating contacts via the web interface, and then access those contacts via the API. This way you            can see examples of the fields and sub-elements attached to the object. A common source of problems during write/update request is caused when users omit            required fields, or insert invalid data in a field (e.g. reference a CATEGORY_ID that does not exist in the user's Insightly instance.",
        "operationId": "AddContact",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiContact",
            "in": "body",
            "description": "The Contact to add (just include the JSON object as the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIContact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact added.",
            "schema": {
              "title": "Contact",
              "type": "object",
              "properties": {
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SALUTATION": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "FIRST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "LAST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "BACKGROUND": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DEFAULT_LINKED_ORGANISATION": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "ADDRESSES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIAddress"
                  }
                },
                "CONTACTINFOS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactInfo"
                  }
                },
                "DATES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactDate"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CONTACTLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                },
                "SOCIAL_LINKEDIN": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_FACEBOOK": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_TWITTER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ASSISTANT_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a Contact",
        "description": "",
        "operationId": "GetContact",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Contact",
              "type": "object",
              "properties": {
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SALUTATION": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "FIRST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "LAST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "BACKGROUND": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DEFAULT_LINKED_ORGANISATION": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "ADDRESSES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIAddress"
                  }
                },
                "CONTACTINFOS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactInfo"
                  }
                },
                "DATES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactDate"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CONTACTLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                },
                "SOCIAL_LINKEDIN": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_FACEBOOK": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_TWITTER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ASSISTANT_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a Contact",
        "description": "",
        "operationId": "DeleteContact",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Image": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a Contact's Image",
        "description": "",
        "operationId": "GetImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded."
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a Contact's Image",
        "description": "",
        "operationId": "DeleteImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Image/{filename}": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates a Contact's Image",
        "description": "This action will replace any existing Image attached to the Contact. The contents of the image data should be sent as binary data in the request payload. See our <a href=\"http://github.com/Insightly\" target=\"_blank\">client libraries</a> for an example of how this is done.",
        "operationId": "UpdateImage",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "Name of Image File to be attached to Contact",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "body",
            "description": "File to upload",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Image updated.",
            "schema": {
              "title": "Contact",
              "type": "object",
              "properties": {
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SALUTATION": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "FIRST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "LAST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "BACKGROUND": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DEFAULT_LINKED_ORGANISATION": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "ADDRESSES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIAddress"
                  }
                },
                "CONTACTINFOS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactInfo"
                  }
                },
                "DATES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactDate"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CONTACTLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                },
                "SOCIAL_LINKEDIN": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_FACEBOOK": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_TWITTER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ASSISTANT_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          },
          "417": {
            "description": "Image update failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Addresses": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates an Address",
        "operationId": "UpdateAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiAddress",
            "in": "body",
            "description": "The Address to update (just include the JSON object as the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address updated.",
            "schema": {
              "title": "Address",
              "required": [
                "ADDRESS_TYPE"
              ],
              "type": "object",
              "properties": {
                "ADDRESS_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ADDRESS_TYPE": {
                  "type": "string"
                },
                "STREET": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "CITY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "STATE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "POSTCODE": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "COUNTRY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Address not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds an Address",
        "description": "Limited to two addresses, one Mailing Address and one Other Address. For more information, please refer to Body Schema.",
        "operationId": "AddAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiAddress",
            "in": "body",
            "description": "The Address to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIAddress"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Address added.",
            "schema": {
              "title": "Address",
              "required": [
                "ADDRESS_TYPE"
              ],
              "type": "object",
              "properties": {
                "ADDRESS_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ADDRESS_TYPE": {
                  "type": "string"
                },
                "STREET": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "CITY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "STATE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "POSTCODE": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "COUNTRY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Addresses/{addressId}": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes an Address",
        "operationId": "DeleteAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "An Address' ID (ADDRESS_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Address not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/ContactInfos": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates a Contact Info",
        "operationId": "UpdateContactInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiContactInfo",
            "in": "body",
            "description": "The Contact Info to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIContactInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact Info updated.",
            "schema": {
              "title": "ContactInfo",
              "required": [
                "TYPE",
                "DETAIL"
              ],
              "type": "object",
              "properties": {
                "CONTACT_INFO_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TYPE": {
                  "type": "string"
                },
                "SUBTYPE": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "LABEL": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAIL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Contact Info not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds a Contact Info",
        "description": "Limited to six Phone Numbers and one Email Address. For more information, please refer to Body Schema.",
        "operationId": "AddContactInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiContactInfo",
            "in": "body",
            "description": "The Contact Info to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIContactInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact Info added.",
            "schema": {
              "title": "ContactInfo",
              "required": [
                "TYPE",
                "DETAIL"
              ],
              "type": "object",
              "properties": {
                "CONTACT_INFO_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TYPE": {
                  "type": "string"
                },
                "SUBTYPE": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "LABEL": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAIL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/ContactInfos/{contactInfoId}": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a Contact Info",
        "operationId": "DeleteContactInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "contactInfoId",
            "in": "path",
            "description": "A Contact Info's ID (CONTAC_INFO_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Contact Info not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Dates": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates a Contact Date",
        "operationId": "UpdateDate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiContactDate",
            "in": "body",
            "description": "The Contact Date to add (just include the JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIContactDate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Date updated.",
            "schema": {
              "title": "ContactDate",
              "type": "object",
              "properties": {
                "DATE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OCCASION_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OCCASION_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "REPEAT_YEARLY": {
                  "type": "boolean"
                },
                "CREATE_TASK_YEARLY": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Date not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds a Contact Date",
        "operationId": "AddDate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiContactDate",
            "in": "body",
            "description": "The Contact Date to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIContactDate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Date added.",
            "schema": {
              "title": "ContactDate",
              "type": "object",
              "properties": {
                "DATE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OCCASION_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OCCASION_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "REPEAT_YEARLY": {
                  "type": "boolean"
                },
                "CREATE_TASK_YEARLY": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Dates/{dateId}": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a Contact Date",
        "operationId": "DeleteDate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dateId",
            "in": "path",
            "description": "A Contact Date's ID (DATE_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Date not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/CustomFields": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates a Custom Field",
        "operationId": "UpdateCustomField",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiCustomField",
            "in": "body",
            "description": "The Custom Field to edit (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICustomField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom Field updated.",
            "schema": {
              "title": "CustomField",
              "type": "object",
              "properties": {
                "CUSTOM_FIELD_ID": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FIELD_VALUE": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Custom Field not found."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/CustomFields/{customFieldId}": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a Custom Field",
        "operationId": "DeleteCustomField",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customFieldId",
            "in": "path",
            "description": "A Custom Field's ID (CUSTOM_FIELD_ID)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Custom Field not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Tags": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds a Tag",
        "operationId": "AddTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiTag",
            "in": "body",
            "description": "The Tag to add (just include the JSON object as the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag added.",
            "schema": {
              "title": "Tag",
              "type": "object",
              "properties": {
                "TAG_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Tags/{tagName}": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a Tag",
        "operationId": "DeleteTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "tagName",
            "in": "path",
            "description": "A Tag's name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Tag not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Events": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a Contact's Events",
        "operationId": "GetEvents",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when event was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of events to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of events to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "CalendarEvent",
                "required": [
                  "TITLE",
                  "START_DATE_UTC",
                  "END_DATE_UTC"
                ],
                "type": "object",
                "properties": {
                  "EVENT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LOCATION": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DETAILS": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "START_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "END_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ALL_DAY": {
                    "type": "boolean"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "EVENTLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEventLink"
                    }
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Notes": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a Contact's Notes",
        "operationId": "GetNotes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when note was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of notes to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of notes to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Note",
                "required": [
                  "TITLE",
                  "LINK_SUBJECT_ID",
                  "LINK_SUBJECT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "NOTE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "type": "string"
                  },
                  "LINK_SUBJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "LINK_SUBJECT_TYPE": {
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "NOTELINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APINoteLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds a Note to a Contact",
        "operationId": "AddNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiNote",
            "in": "body",
            "description": "The Note to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APINote"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Note added.",
            "schema": {
              "title": "Note",
              "required": [
                "TITLE",
                "LINK_SUBJECT_ID",
                "LINK_SUBJECT_TYPE"
              ],
              "type": "object",
              "properties": {
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "BODY": {
                  "type": "string"
                },
                "LINK_SUBJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LINK_SUBJECT_TYPE": {
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "NOTELINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APINoteLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Links": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates a Link",
        "operationId": "UpdateLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Link to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Link updated.",
            "schema": {
              "title": "Link",
              "type": "object",
              "properties": {
                "LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ROLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAILS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Link not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds a Link",
        "operationId": "AddLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Link to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILink"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Link added.",
            "schema": {
              "title": "Link",
              "type": "object",
              "properties": {
                "LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ROLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAILS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Links/{linkId}": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a Link",
        "operationId": "DeleteLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "A Link's ID (LINK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Link not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/ContactLinks": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Updates a Contact Link",
        "operationId": "UpdateContactLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Contact Link to add (just include the JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIContactLink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact Link updated.",
            "schema": {
              "title": "ContactLink",
              "type": "object",
              "properties": {
                "CONTACT_LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "FIRST_CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "RELATIONSHIP_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DETAILS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Contact Link not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds a Contact Link",
        "operationId": "AddContactLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Contact Link to add (just include the JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIContactLink"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact Link added.",
            "schema": {
              "title": "ContactLink",
              "type": "object",
              "properties": {
                "CONTACT_LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "FIRST_CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "RELATIONSHIP_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DETAILS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/ContactLinks/{linkId}": {
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Deletes a Contact Link",
        "operationId": "DeleteContactLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "A Contact Link's ID (CONTACT_LINK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact or Contact Link not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Follow": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a Follow record for the Contact",
        "operationId": "GetFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Start following a Contact",
        "operationId": "AddFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Follow added.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Stop following a Contact",
        "operationId": "DeleteFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/ActivitySetAssignment": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds an Activity Set to a Contact",
        "operationId": "AddActivitySetAssignment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiActivitySetAssignment",
            "in": "body",
            "description": "The Activity Set Assignment object which contains the configuration information for the Activity Set",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIActivitySetAssignment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Activity Set assigned."
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact, Activity Set or Activities not found."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/FileAttachments": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a Contact's File Attachments",
        "operationId": "GetFileAttachments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID (CONTACT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when file attachment was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of file attachments to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of file attachments to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "FileAttachment",
                "required": [
                  "FILE_NAME",
                  "CONTENT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "FILE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_NAME": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CONTENT_TYPE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FILE_SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "URL": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Adds a File Attachment to a Contact",
        "description": "This endpoint expects multipart/form-data as the request payload. See Stack Overflow for examples of how to generate multipart requests, or see our <a href=\"http://github.com/Insightly\" target=\"_blank\">client libraries</a> for an example of how this is generated. Only one file can be added per request.",
        "operationId": "AddFileAttachment",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contact ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file part of the multipart/form-data request. Only one file can be added per request.",
            "required": true,
            "schema": {},
            "type": "file"
          },
          {
            "name": "file_name",
            "in": "formData",
            "type": "string",
            "maxLength": 500
          },
          {
            "name": "content_type",
            "in": "formData",
            "type": "string",
            "maxLength": 255
          },
          {
            "name": "file_category_id",
            "in": "formData",
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "File Attachment added.",
            "schema": {
              "title": "FileAttachment",
              "required": [
                "FILE_NAME",
                "CONTENT_TYPE"
              ],
              "type": "object",
              "properties": {
                "FILE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_NAME": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CONTENT_TYPE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FILE_SIZE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "URL": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record or storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          },
          "417": {
            "description": "File Attachment insert failed."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Emails": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a list of Contact's Emails",
        "operationId": "GetEmails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when email was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of emails to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of emails to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Email",
                "type": "object",
                "properties": {
                  "EMAIL_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "GMAIL_MESSAGE_ID": {
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "EMAIL_FROM": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_TO": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_CC": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SUBJECT": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY_EXTRACT": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FORMAT": {
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "EMAILLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEmailLink"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      }
    },
    "/Contacts/{id}/Tasks": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Gets a list of Contact's Tasks",
        "operationId": "GetTasks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Contact's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when task was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of tasks to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of tasks to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Task",
                "required": [
                  "TITLE",
                  "PUBLICLY_VISIBLE",
                  "COMPLETED"
                ],
                "type": "object",
                "properties": {
                  "TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DUE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "COMPLETED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "COMPLETED": {
                    "type": "boolean"
                  },
                  "PROJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "MILESTONE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STAGE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DETAILS": {
                    "type": "string"
                  },
                  "STATUS": {
                    "type": "string"
                  },
                  "PRIORITY": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PERCENT_COMPLETE": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "START_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ASSIGNED_BY_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PARENT_TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_VISIBLE": {
                    "type": "boolean"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "ASSIGNED_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "ASSIGNED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "RECURRENCE": {
                    "type": "string"
                  },
                  "TASKLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITaskLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Contact."
          },
          "404": {
            "description": "Contact not found."
          }
        },
        "deprecated": false
      }
    },
    "/Countries": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Gets a list of Countries used by Insightly",
        "description": "This read only endpoint returns a list of the countries Insightly recognizes for use in addresses.",
        "operationId": "GetCountries",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APICountry"
              }
            }
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Currencies": {
      "get": {
        "tags": [
          "Currencies"
        ],
        "summary": "Gets a list of Currencies used by Insightly",
        "description": "This read only endpoint returns a list of the currencies and currency symbols currently recognized by Insightly.",
        "operationId": "GetCurrencies",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APICurrency"
              }
            }
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/CustomFieldGroups": {
      "get": {
        "tags": [
          "CustomFieldGroups"
        ],
        "summary": "Gets a list of Custom Field Groups defined for your instance",
        "operationId": "GetCustomFieldGroups",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of custom field groups to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of custom field groups to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "CustomFieldGroup",
                "type": "object",
                "properties": {
                  "GROUP_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "GROUP_NAME": {
                    "type": "string"
                  },
                  "GROUP_FOR": {
                    "type": "string"
                  },
                  "GROUP_ORDER": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/CustomFields": {
      "get": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Gets a list of Custom Fields",
        "description": "Use this API call to get a list of custom fields metadata. The properties FIELD_FOR, GROUP_ID, and ORDER_ID can be used to determine which fields belong to a particular object. See CustomFieldGroups if more data on a custom field's group is needed. A common problem API users have is to reference an invalid CUSTOM_FIELD_ID when referencing custom fields in a newly created or updated object.            If you plan to use custom fields in your API based application, be sure you are working with valid custom field IDs. To add or update custom fields for your Insightly instance, you'll need to go to the web app to do so.",
        "operationId": "GetCustomFields",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of custom fields to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of custom fields to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "CustomFieldMetadata",
                "required": [
                  "CUSTOM_FIELD_ID",
                  "ORDER_ID",
                  "FIELD_FOR",
                  "FIELD_NAME",
                  "FIELD_TYPE"
                ],
                "type": "object",
                "properties": {
                  "CUSTOM_FIELD_ID": {
                    "type": "string"
                  },
                  "ORDER_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FIELD_FOR": {
                    "maxLength": 12,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FIELD_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FIELD_TYPE": {
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FIELD_HELP_TEXT": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DEFAULT_VALUE": {
                    "type": "object"
                  },
                  "GROUP_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "EDITABLE": {
                    "type": "boolean"
                  },
                  "VISIBLE": {
                    "type": "boolean"
                  },
                  "CUSTOM_FIELD_OPTIONS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APICustomFieldOption"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Emails/Search": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Gets a filtered list of Emails.",
        "description": "Only one optional parameter (excluding brief, top, skip and count_total) can be specified.             Simple object graphs (excluding EMAILLINKS, TAGS, etc.) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetEmailsBySearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email_from",
            "in": "query",
            "description": "Optional, from email address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "email_to",
            "in": "query",
            "description": "Optional, to email address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Optional, a single tag. Performs an exact match.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when email was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the email.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of emails to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of emails to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Email",
                "type": "object",
                "properties": {
                  "EMAIL_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "GMAIL_MESSAGE_ID": {
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "EMAIL_FROM": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_TO": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_CC": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SUBJECT": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY_EXTRACT": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FORMAT": {
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "EMAILLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEmailLink"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Emails": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Gets a list of Emails.",
        "description": "Simple object graphs (excluding EMAILLINKS, TAGS, etc.) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetEmails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the email.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of emails to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of emails to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Email",
                "type": "object",
                "properties": {
                  "EMAIL_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "GMAIL_MESSAGE_ID": {
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "EMAIL_FROM": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_TO": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_CC": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SUBJECT": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY_EXTRACT": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FORMAT": {
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "EMAILLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEmailLink"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Emails/{id}": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Gets an Email",
        "description": "",
        "operationId": "GetEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Email's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Email",
              "type": "object",
              "properties": {
                "EMAIL_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "GMAIL_MESSAGE_ID": {
                  "maxLength": 20,
                  "minLength": 0,
                  "type": "string"
                },
                "EMAIL_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "EMAIL_FROM": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "EMAIL_TO": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "EMAIL_CC": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "SUBJECT": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "BODY": {
                  "maxLength": 1000,
                  "minLength": 0,
                  "type": "string"
                },
                "BODY_EXTRACT": {
                  "maxLength": 1000,
                  "minLength": 0,
                  "type": "string"
                },
                "FORMAT": {
                  "maxLength": 5,
                  "minLength": 0,
                  "type": "string"
                },
                "SIZE": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "EMAILLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIEmailLink"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Email."
          },
          "404": {
            "description": "Email not found."
          }
        },
        "deprecated": false
      }
    },
    "/Emails/{id}/Tags": {
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Adds a Tag for an Email",
        "operationId": "AddTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Email's ID (EMAIL_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiTag",
            "in": "body",
            "description": "The Tag to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag added.",
            "schema": {
              "title": "Tag",
              "type": "object",
              "properties": {
                "TAG_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Email."
          },
          "404": {
            "description": "Email not found."
          }
        },
        "deprecated": false
      }
    },
    "/Emails/{id}/Tags/{tagName}": {
      "delete": {
        "tags": [
          "Emails"
        ],
        "summary": "Deletes a Tag from an Email",
        "operationId": "DeleteTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Email's ID (EMAIL_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "tagName",
            "in": "path",
            "description": "A Tag's name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Email."
          },
          "404": {
            "description": "Email or Tag not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Emails/{id}/Comments": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Gets an Email's Comments",
        "operationId": "GetComments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Emails's ID (EMAIL_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when comment was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of comments to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of comments to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Comment",
                "type": "object",
                "properties": {
                  "COMMENT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "BODY": {
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "NOTE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "EMAIL_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Email."
          },
          "404": {
            "description": "Email not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Adds a Comment to an email.",
        "operationId": "AddComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Email's ID (EMAIL_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiComment",
            "in": "body",
            "description": "The Comment to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIComment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Comment added.",
            "schema": {
              "title": "Comment",
              "type": "object",
              "properties": {
                "COMMENT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "BODY": {
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "EMAIL_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TASK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          },
          "403": {
            "description": "API User does not have access to Email."
          },
          "404": {
            "description": "Email not found."
          }
        },
        "deprecated": false
      }
    },
    "/Emails/{id}/Follow": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Gets a Follow record for the Email",
        "operationId": "GetFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Email's ID (EMAIL_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Email."
          },
          "404": {
            "description": "Email not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Start following an Email",
        "operationId": "AddFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Email's ID (EMAIL_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Follow added.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Email."
          },
          "404": {
            "description": "Email not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Emails"
        ],
        "summary": "Stop following an Email",
        "operationId": "DeleteFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Email's ID (EMAIL_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Email."
          },
          "404": {
            "description": "Email not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Emails/{id}/EmailLinks": {
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Adds an Email Link",
        "operationId": "AddEmailLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Email's ID (EMAIL_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Email Link to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEmailLink"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Email Link added.",
            "schema": {
              "title": "EmailLink",
              "type": "object",
              "properties": {
                "EMAIL_LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "EMAIL_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LEAD_ID": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Email."
          },
          "404": {
            "description": "Email not found."
          }
        },
        "deprecated": false
      }
    },
    "/Emails/{id}/EmailLinks/{linkId}": {
      "delete": {
        "tags": [
          "Emails"
        ],
        "summary": "Deletes an Email Link",
        "operationId": "DeleteEmailLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Email's ID (EMAIL_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "An Email Link's ID (EMAIL_LINK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Email."
          },
          "404": {
            "description": "Email or Email Link not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Emails/{id}/FileAttachments": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Gets an Email's File Attachments",
        "operationId": "GetFileAttachments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Email's ID (EMAIL_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when file attachment was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of file attachments to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of file attachments to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "FileAttachment",
                "required": [
                  "FILE_NAME",
                  "CONTENT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "FILE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_NAME": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CONTENT_TYPE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FILE_SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "URL": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Email."
          },
          "404": {
            "description": "Email not found."
          }
        },
        "deprecated": false
      }
    },
    "/Events/Search": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Gets a filtered list of Calendar Events.",
        "description": "Only one optional parameter (excluding top, skip and count_total) can be specified. Simple object graphs (excluding EVENTLINKS) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetEventsBySearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Optional, event title.",
            "required": false,
            "type": "string"
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "description": "Optional, id of the owner user.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start_date_utc",
            "in": "query",
            "description": "Optional, start date of the event. Only the date is considered, not the time.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date_utc",
            "in": "query",
            "description": "Optional, end date of the event. Only the date is considered, not the time.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when event was last updated. Date and time are considered.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the event.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of events to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of events to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "CalendarEvent",
                "required": [
                  "TITLE",
                  "START_DATE_UTC",
                  "END_DATE_UTC"
                ],
                "type": "object",
                "properties": {
                  "EVENT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LOCATION": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DETAILS": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "START_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "END_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ALL_DAY": {
                    "type": "boolean"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "EVENTLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEventLink"
                    }
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Gets a list of Calendar Events.",
        "description": "Simple object graphs (excluding EVENTLINKS) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetEvents",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the event.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of events to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of events to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "CalendarEvent",
                "required": [
                  "TITLE",
                  "START_DATE_UTC",
                  "END_DATE_UTC"
                ],
                "type": "object",
                "properties": {
                  "EVENT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LOCATION": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DETAILS": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "START_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "END_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ALL_DAY": {
                    "type": "boolean"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "EVENTLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEventLink"
                    }
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Events"
        ],
        "summary": "Updates a Calendar Event",
        "operationId": "UpdateEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiEvent",
            "in": "body",
            "description": "The Event to update (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICalendarEvent"
            }
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if you wish to do a partial update containing only top level properties of the Event. When true, all sub-collections are ignored.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Event updated.",
            "schema": {
              "title": "CalendarEvent",
              "required": [
                "TITLE",
                "START_DATE_UTC",
                "END_DATE_UTC"
              ],
              "type": "object",
              "properties": {
                "EVENT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "LOCATION": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "START_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "END_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "ALL_DAY": {
                  "type": "boolean"
                },
                "PUBLICLY_VISIBLE": {
                  "type": "boolean"
                },
                "REMINDER_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "REMINDER_SENT": {
                  "type": "boolean"
                },
                "EVENTLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIEventLink"
                  }
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Event."
          },
          "404": {
            "description": "Event not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Adds a Calendar Event",
        "operationId": "AddEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiEvent",
            "in": "body",
            "description": "The Event to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICalendarEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Event added.",
            "schema": {
              "title": "CalendarEvent",
              "required": [
                "TITLE",
                "START_DATE_UTC",
                "END_DATE_UTC"
              ],
              "type": "object",
              "properties": {
                "EVENT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "LOCATION": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "START_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "END_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "ALL_DAY": {
                  "type": "boolean"
                },
                "PUBLICLY_VISIBLE": {
                  "type": "boolean"
                },
                "REMINDER_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "REMINDER_SENT": {
                  "type": "boolean"
                },
                "EVENTLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIEventLink"
                  }
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          }
        },
        "deprecated": false
      }
    },
    "/Events/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Gets a Calendar Event",
        "operationId": "GetEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Event's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "CalendarEvent",
              "required": [
                "TITLE",
                "START_DATE_UTC",
                "END_DATE_UTC"
              ],
              "type": "object",
              "properties": {
                "EVENT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "LOCATION": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "START_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "END_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "ALL_DAY": {
                  "type": "boolean"
                },
                "PUBLICLY_VISIBLE": {
                  "type": "boolean"
                },
                "REMINDER_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "REMINDER_SENT": {
                  "type": "boolean"
                },
                "EVENTLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIEventLink"
                  }
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Event."
          },
          "404": {
            "description": "Event not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Deletes a Calendar Event",
        "operationId": "DeleteEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Event's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Event."
          },
          "404": {
            "description": "Event not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Events/{id}/EventLinks": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Adds an Event Link",
        "operationId": "AddEventLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Event's ID (EVENT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Event Link to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIEventLink"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Event Link added.",
            "schema": {
              "title": "EventLink",
              "type": "object",
              "properties": {
                "EVENT_LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "EVENT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LEAD_ID": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Event."
          },
          "404": {
            "description": "Event not found."
          }
        },
        "deprecated": false
      }
    },
    "/Events/{id}/EventLinks/{linkId}": {
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Deletes an Event Link",
        "operationId": "DeleteEventLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Event's ID (EVENT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "A EVENT Link's ID (EVENT_LINK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Event."
          },
          "404": {
            "description": "Event or Event Link not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/FileAttachments/{id}": {
      "get": {
        "tags": [
          "FileAttachments"
        ],
        "summary": "Gets a File Attachment",
        "description": "",
        "operationId": "GetFileAttachment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A File Attachment's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded."
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to File Attachment."
          },
          "404": {
            "description": "File Attachment not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "FileAttachments"
        ],
        "summary": "Deletes a File Attachment",
        "description": "",
        "operationId": "DeleteFileAttachment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A File Attachment's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to File Attachment."
          },
          "404": {
            "description": "File Attachment not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/FileCategories": {
      "get": {
        "tags": [
          "FileCategories"
        ],
        "summary": "Gets a list of File Categories",
        "description": "This read only endpoint returns a list of file categories that have been set up for the Insightly instance.",
        "operationId": "GetFileCategories",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of file categories to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of file categories to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Category",
                "required": [
                  "CATEGORY_NAME",
                  "BACKGROUND_COLOR"
                ],
                "type": "object",
                "properties": {
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "CATEGORY_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ACTIVE": {
                    "type": "boolean"
                  },
                  "BACKGROUND_COLOR": {
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "FileCategories"
        ],
        "summary": "Updates a File Category",
        "description": "This endpoint is used to update an existing File Category. This endpoint is only accessible to users with administrator permission.",
        "operationId": "UpdateFileCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "body",
            "description": "A File Category (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File Category updated.",
            "schema": {
              "title": "Category",
              "required": [
                "CATEGORY_NAME",
                "BACKGROUND_COLOR"
              ],
              "type": "object",
              "properties": {
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CATEGORY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "BACKGROUND_COLOR": {
                  "maxLength": 6,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to edit File Categories."
          },
          "404": {
            "description": "File Category not found."
          },
          "409": {
            "description": "File Category cannot be updated because it has been deactivated."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "FileCategories"
        ],
        "summary": "Adds a File Category",
        "description": "This endpoint is used to create a new File Category. This endpoint is only accessible to users with administrator permission.",
        "operationId": "AddFileCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "body",
            "description": "The File Category to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "File Category added.",
            "schema": {
              "title": "Category",
              "required": [
                "CATEGORY_NAME",
                "BACKGROUND_COLOR"
              ],
              "type": "object",
              "properties": {
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CATEGORY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "BACKGROUND_COLOR": {
                  "maxLength": 6,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to add File Categories."
          }
        },
        "deprecated": false
      }
    },
    "/FileCategories/{id}": {
      "get": {
        "tags": [
          "FileCategories"
        ],
        "summary": "Gets a File Category",
        "description": "This endpoint returns the graph for a specific file category.",
        "operationId": "GetFileCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A File Category's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Category",
              "required": [
                "CATEGORY_NAME",
                "BACKGROUND_COLOR"
              ],
              "type": "object",
              "properties": {
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CATEGORY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "BACKGROUND_COLOR": {
                  "maxLength": 6,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "404": {
            "description": "File Category not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "FileCategories"
        ],
        "summary": "Deactivates a File Category",
        "description": "This endpoint is used to deactivate an existing File Category. This endpoint is only accessible to users with administrator permission.",
        "operationId": "DeleteFileCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A File Category's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Deactivation succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to deactivate File Categories."
          },
          "404": {
            "description": "File Category not found."
          },
          "409": {
            "description": "File Category cannot be deactivated because it's in use or already deactivated."
          },
          "417": {
            "description": "Deactivation failed."
          }
        },
        "deprecated": false
      }
    },
    "/Follows": {
      "get": {
        "tags": [
          "Follows"
        ],
        "summary": "Gets a list of followed records for the user",
        "operationId": "GetFollows",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "record_type",
            "in": "query",
            "description": "Optional, filters followed records by a given record type.",
            "required": false,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of records to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of records to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "UserFollow",
                "type": "object",
                "properties": {
                  "RECORD_TYPE": {
                    "type": "string"
                  },
                  "RECORD_ID": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid record_type specified."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Instance": {
      "get": {
        "tags": [
          "Instance"
        ],
        "summary": "Gets the Instance",
        "operationId": "GetInstance",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "$ref": "#/definitions/APIInstance"
            }
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/Search": {
      "get": {
        "tags": [
          "Leads"
        ],
        "summary": "Gets a filtered list of Leads.",
        "description": "Only one optional parameter (excluding include_converted, top, skip and count_total) can be specified. Simple object graphs (excluding Custom Fields, Tags, etc.) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetLeadsBySearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Optional, email address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Optional, a single tag. Performs an exact match.",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone_number",
            "in": "query",
            "description": "Optional, phone number.",
            "required": false,
            "type": "string"
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "Optional, first name of the contact.",
            "required": false,
            "type": "string"
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Optional, last name of the contact.",
            "required": false,
            "type": "string"
          },
          {
            "name": "city",
            "in": "query",
            "description": "Optional, name of the city from lead address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Optional, state from the lead address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "postcode",
            "in": "query",
            "description": "Optional, postal code from the lead address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Optional, name of the country from lead address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "organisation",
            "in": "query",
            "description": "Optional, name of the default organisation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when lead was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "include_converted",
            "in": "query",
            "description": "Optional, by default converted leads are not included, pass in \"true\" to include them in the response",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the lead.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of lead to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of lead to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Lead",
                "required": [
                  "LAST_NAME"
                ],
                "type": "object",
                "properties": {
                  "LEAD_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "SALUTATION": {
                    "maxLength": 50,
                    "minLength": 0,
                    "type": "string"
                  },
                  "TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FIRST_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LAST_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ORGANIZATION_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "PHONE_NUMBER": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "MOBILE_PHONE_NUMBER": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FAX_NUMBER": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_ADDRESS": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "WEBSITE_URL": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CONVERTED": {
                    "type": "boolean"
                  },
                  "CONVERTED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CONVERTED_CONTACT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "CONVERTED_ORGANIZATION_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "CONVERTED_OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "INDUSTRY": {
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LEAD_STATUS_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "LEAD_SOURCE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "EMPLOYEE_COUNT": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "LEAD_RATING": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "LEAD_DESCRIPTION": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "CUSTOMFIELDS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APICustomField"
                    }
                  },
                  "ADDRESS_STREET": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ADDRESS_CITY": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ADDRESS_STATE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ADDRESS_POSTCODE": {
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ADDRESS_COUNTRY": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "IMAGE_URL": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "Lead Management disabled."
          }
        },
        "deprecated": false
      }
    },
    "/Leads": {
      "get": {
        "tags": [
          "Leads"
        ],
        "summary": "Gets a list of Leads.",
        "description": "Simple object graphs (excluding Custom Fields, Tags, etc.) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetLeads",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_converted",
            "in": "query",
            "description": "Optional, by default converted leads are not included, pass in \"true\" to include them in the response",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the lead.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of lead to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of lead to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Lead",
                "required": [
                  "LAST_NAME"
                ],
                "type": "object",
                "properties": {
                  "LEAD_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "SALUTATION": {
                    "maxLength": 50,
                    "minLength": 0,
                    "type": "string"
                  },
                  "TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FIRST_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LAST_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ORGANIZATION_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "PHONE_NUMBER": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "MOBILE_PHONE_NUMBER": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FAX_NUMBER": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_ADDRESS": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "WEBSITE_URL": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CONVERTED": {
                    "type": "boolean"
                  },
                  "CONVERTED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CONVERTED_CONTACT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "CONVERTED_ORGANIZATION_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "CONVERTED_OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "INDUSTRY": {
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LEAD_STATUS_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "LEAD_SOURCE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "EMPLOYEE_COUNT": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "LEAD_RATING": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "LEAD_DESCRIPTION": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "CUSTOMFIELDS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APICustomField"
                    }
                  },
                  "ADDRESS_STREET": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ADDRESS_CITY": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ADDRESS_STATE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ADDRESS_POSTCODE": {
                    "maxLength": 128,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ADDRESS_COUNTRY": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "IMAGE_URL": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "Lead Management disabled."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Leads"
        ],
        "summary": "Updates a Lead",
        "description": "A common source of problems when updating leads occurs when users omit required fields, or insert             invalid data into a field. A good troubleshooting technique             is to create a few leads via the web interface, with representative data, links, etc, and then access             these leads via the API, and inspect the returned object graph.",
        "operationId": "UpdateLead",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiLead",
            "in": "body",
            "description": "A Lead (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILead"
            }
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if you wish to do a partial update containing only top level properties of the Lead. When true, all sub-collections are ignored.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Lead updated.",
            "schema": {
              "title": "Lead",
              "required": [
                "LAST_NAME"
              ],
              "type": "object",
              "properties": {
                "LEAD_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SALUTATION": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "TITLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FIRST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "LAST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ORGANIZATION_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "PHONE_NUMBER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "MOBILE_PHONE_NUMBER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FAX_NUMBER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "EMAIL_ADDRESS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "WEBSITE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CONVERTED": {
                  "type": "boolean"
                },
                "CONVERTED_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CONVERTED_CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONVERTED_ORGANIZATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONVERTED_OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "INDUSTRY": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "LEAD_STATUS_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LEAD_SOURCE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "EMPLOYEE_COUNT": {
                  "format": "int32",
                  "type": "integer"
                },
                "LEAD_RATING": {
                  "format": "int32",
                  "type": "integer"
                },
                "LEAD_DESCRIPTION": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "ADDRESS_STREET": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_CITY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_STATE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_POSTCODE": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_COUNTRY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Leads"
        ],
        "summary": "Adds a Lead",
        "description": "A common source of problems when creating leads occurs when users omit required fields, or insert             invalid data into a field. A good troubleshooting technique             is to create a few leads via the web interface, with representative data, links, etc, and then access             these leads via the API, and inspect the returned object graph.",
        "operationId": "AddLead",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiLead",
            "in": "body",
            "description": "The Lead to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILead"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Lead added.",
            "schema": {
              "title": "Lead",
              "required": [
                "LAST_NAME"
              ],
              "type": "object",
              "properties": {
                "LEAD_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SALUTATION": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "TITLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FIRST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "LAST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ORGANIZATION_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "PHONE_NUMBER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "MOBILE_PHONE_NUMBER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FAX_NUMBER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "EMAIL_ADDRESS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "WEBSITE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CONVERTED": {
                  "type": "boolean"
                },
                "CONVERTED_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CONVERTED_CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONVERTED_ORGANIZATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONVERTED_OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "INDUSTRY": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "LEAD_STATUS_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LEAD_SOURCE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "EMPLOYEE_COUNT": {
                  "format": "int32",
                  "type": "integer"
                },
                "LEAD_RATING": {
                  "format": "int32",
                  "type": "integer"
                },
                "LEAD_DESCRIPTION": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "ADDRESS_STREET": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_CITY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_STATE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_POSTCODE": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_COUNTRY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          },
          "403": {
            "description": "Lead Management disabled."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}": {
      "get": {
        "tags": [
          "Leads"
        ],
        "summary": "Gets a Lead",
        "description": "",
        "operationId": "GetLead",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Lead",
              "required": [
                "LAST_NAME"
              ],
              "type": "object",
              "properties": {
                "LEAD_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SALUTATION": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "TITLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FIRST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "LAST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ORGANIZATION_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "PHONE_NUMBER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "MOBILE_PHONE_NUMBER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FAX_NUMBER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "EMAIL_ADDRESS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "WEBSITE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CONVERTED": {
                  "type": "boolean"
                },
                "CONVERTED_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CONVERTED_CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONVERTED_ORGANIZATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONVERTED_OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "INDUSTRY": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "LEAD_STATUS_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LEAD_SOURCE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "EMPLOYEE_COUNT": {
                  "format": "int32",
                  "type": "integer"
                },
                "LEAD_RATING": {
                  "format": "int32",
                  "type": "integer"
                },
                "LEAD_DESCRIPTION": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "ADDRESS_STREET": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_CITY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_STATE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_POSTCODE": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_COUNTRY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Leads"
        ],
        "summary": "Deletes a Lead",
        "description": "",
        "operationId": "DeleteLead",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/Image": {
      "get": {
        "tags": [
          "Leads"
        ],
        "summary": "Gets a Lead's Image",
        "description": "",
        "operationId": "GetImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded."
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Leads"
        ],
        "summary": "Deletes a Lead's Image",
        "description": "",
        "operationId": "DeleteImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/Image/{filename}": {
      "put": {
        "tags": [
          "Leads"
        ],
        "summary": "Updates a Lead's Image",
        "description": "This action will replace any existing Image attached to the Lead. The contents of the image file should be sent as binary data in the request payload. See our <a href=\"http://github.com/Insightly\" target=\"_blank\">client libraries</a> for an example of how this is done.",
        "operationId": "UpdateImage",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "Name of Image File to be attached to Lead",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "body",
            "description": "File to upload",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Image updated.",
            "schema": {
              "title": "Lead",
              "required": [
                "LAST_NAME"
              ],
              "type": "object",
              "properties": {
                "LEAD_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SALUTATION": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "TITLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FIRST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "LAST_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ORGANIZATION_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "PHONE_NUMBER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "MOBILE_PHONE_NUMBER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FAX_NUMBER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "EMAIL_ADDRESS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "WEBSITE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CONVERTED": {
                  "type": "boolean"
                },
                "CONVERTED_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CONVERTED_CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONVERTED_ORGANIZATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONVERTED_OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "INDUSTRY": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "LEAD_STATUS_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LEAD_SOURCE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "EMPLOYEE_COUNT": {
                  "format": "int32",
                  "type": "integer"
                },
                "LEAD_RATING": {
                  "format": "int32",
                  "type": "integer"
                },
                "LEAD_DESCRIPTION": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "ADDRESS_STREET": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_CITY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_STATE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_POSTCODE": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "ADDRESS_COUNTRY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          },
          "417": {
            "description": "Image update failed."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/CustomFields": {
      "put": {
        "tags": [
          "Leads"
        ],
        "summary": "Updates a Custom Field",
        "operationId": "UpdateCustomField",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiCustomField",
            "in": "body",
            "description": "The Custom Field to edit (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICustomField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom Field updated.",
            "schema": {
              "title": "CustomField",
              "type": "object",
              "properties": {
                "CUSTOM_FIELD_ID": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FIELD_VALUE": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead or Custom Field not found."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/CustomFields/{customFieldId}": {
      "delete": {
        "tags": [
          "Leads"
        ],
        "summary": "Deletes a Custom Field",
        "operationId": "DeleteCustomField",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customFieldId",
            "in": "path",
            "description": "A Custom Field's ID (CUSTOM_FIELD_ID)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead or Custom Field not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/Tags": {
      "post": {
        "tags": [
          "Leads"
        ],
        "summary": "Adds a Tag for a Lead",
        "operationId": "AddTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiTag",
            "in": "body",
            "description": "The Tag to add (just include the JSON object in request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag added.",
            "schema": {
              "title": "Tag",
              "type": "object",
              "properties": {
                "TAG_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/Tags/{tagName}": {
      "delete": {
        "tags": [
          "Leads"
        ],
        "summary": "Deletes a Tag from a Lead",
        "operationId": "DeleteTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "tagName",
            "in": "path",
            "description": "A Tag's name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead or Tag not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/Events": {
      "get": {
        "tags": [
          "Leads"
        ],
        "summary": "Gets a Lead's Events",
        "operationId": "GetEvents",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when event was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of events to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of events to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "CalendarEvent",
                "required": [
                  "TITLE",
                  "START_DATE_UTC",
                  "END_DATE_UTC"
                ],
                "type": "object",
                "properties": {
                  "EVENT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LOCATION": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DETAILS": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "START_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "END_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ALL_DAY": {
                    "type": "boolean"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "EVENTLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEventLink"
                    }
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/Notes": {
      "get": {
        "tags": [
          "Leads"
        ],
        "summary": "Gets a Lead's Notes",
        "operationId": "GetNotes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when note was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of notes to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of notes to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Note",
                "required": [
                  "TITLE",
                  "LINK_SUBJECT_ID",
                  "LINK_SUBJECT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "NOTE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "type": "string"
                  },
                  "LINK_SUBJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "LINK_SUBJECT_TYPE": {
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "NOTELINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APINoteLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Leads"
        ],
        "summary": "Adds a Note to a Lead.",
        "operationId": "AddNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiNote",
            "in": "body",
            "description": "The Note to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APINote"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Note added.",
            "schema": {
              "title": "Note",
              "required": [
                "TITLE",
                "LINK_SUBJECT_ID",
                "LINK_SUBJECT_TYPE"
              ],
              "type": "object",
              "properties": {
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "BODY": {
                  "type": "string"
                },
                "LINK_SUBJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LINK_SUBJECT_TYPE": {
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "NOTELINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APINoteLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/Follow": {
      "get": {
        "tags": [
          "Leads"
        ],
        "summary": "Gets a Follow record for the Lead",
        "operationId": "GetFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Leads"
        ],
        "summary": "Start following a Lead",
        "operationId": "AddFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Follow added.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Leads"
        ],
        "summary": "Stop following a Lead",
        "operationId": "DeleteFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/ActivitySetAssignment": {
      "post": {
        "tags": [
          "Leads"
        ],
        "summary": "Adds an Activity Set to a Lead",
        "operationId": "AddActivitySetAssignment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiActivitySetAssignment",
            "in": "body",
            "description": "The Activity Set Assignment object which contains the configuration information for the Activity Set",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIActivitySetAssignment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Activity Set assigned."
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead, Activity Set or Activities not found."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/LinkEmailAddress": {
      "get": {
        "tags": [
          "Leads"
        ],
        "summary": "Gets the email address to use for linking with the Lead",
        "description": "An email address to use as a maildrop for the Lead.",
        "operationId": "GetLinkEmailAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "LinkEmailAddress",
              "type": "object",
              "properties": {
                "EMAIL": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/FileAttachments": {
      "get": {
        "tags": [
          "Leads"
        ],
        "summary": "Gets a Lead's File Attachments",
        "operationId": "GetFileAttachments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when file attachment was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of file attachments to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of file attachments to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "FileAttachment",
                "required": [
                  "FILE_NAME",
                  "CONTENT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "FILE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_NAME": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CONTENT_TYPE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FILE_SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "URL": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Leads"
        ],
        "summary": "Adds a File Attachment to a Lead",
        "description": "This endpoint expects multipart/form-data as the request payload. See Stack Overflow for examples of how to generate multipart requests, or see our <a href=\"http://github.com/Insightly\" target=\"_blank\">client libraries</a> for an example of how this is generated. Only one file can be added per request.",
        "operationId": "AddFileAttachment",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID (LEAD_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file part of the multipart/form-data request. Only one file can be added per request.",
            "required": true,
            "schema": {},
            "type": "file"
          },
          {
            "name": "file_name",
            "in": "formData",
            "type": "string",
            "maxLength": 500
          },
          {
            "name": "content_type",
            "in": "formData",
            "type": "string",
            "maxLength": 255
          },
          {
            "name": "file_category_id",
            "in": "formData",
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "File Attachment added.",
            "schema": {
              "title": "FileAttachment",
              "required": [
                "FILE_NAME",
                "CONTENT_TYPE"
              ],
              "type": "object",
              "properties": {
                "FILE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_NAME": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CONTENT_TYPE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FILE_SIZE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "URL": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record or storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          },
          "417": {
            "description": "File Attachment insert failed."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/Emails": {
      "get": {
        "tags": [
          "Leads"
        ],
        "summary": "Gets a list of Lead's Emails",
        "operationId": "GetEmails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when email was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of emails to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of emails to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Email",
                "type": "object",
                "properties": {
                  "EMAIL_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "GMAIL_MESSAGE_ID": {
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "EMAIL_FROM": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_TO": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_CC": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SUBJECT": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY_EXTRACT": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FORMAT": {
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "EMAILLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEmailLink"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      }
    },
    "/Leads/{id}/Tasks": {
      "get": {
        "tags": [
          "Leads"
        ],
        "summary": "Gets a list of Lead's Tasks",
        "operationId": "GetTasks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when task was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of tasks to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of tasks to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Task",
                "required": [
                  "TITLE",
                  "PUBLICLY_VISIBLE",
                  "COMPLETED"
                ],
                "type": "object",
                "properties": {
                  "TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DUE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "COMPLETED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "COMPLETED": {
                    "type": "boolean"
                  },
                  "PROJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "MILESTONE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STAGE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DETAILS": {
                    "type": "string"
                  },
                  "STATUS": {
                    "type": "string"
                  },
                  "PRIORITY": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PERCENT_COMPLETE": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "START_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ASSIGNED_BY_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PARENT_TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_VISIBLE": {
                    "type": "boolean"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "ASSIGNED_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "ASSIGNED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "RECURRENCE": {
                    "type": "string"
                  },
                  "TASKLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITaskLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Lead or Lead Management disabled."
          },
          "404": {
            "description": "Lead not found."
          }
        },
        "deprecated": false
      }
    },
    "/LeadSources": {
      "get": {
        "tags": [
          "LeadSources"
        ],
        "summary": "Gets a list of Lead Sources",
        "description": "This endpoint returns a list of the lead sources that have been defined on the Insightly instance.",
        "operationId": "GetLeadSources",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of lead sources to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of lead sources to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "LeadSource",
                "required": [
                  "LEAD_SOURCE"
                ],
                "type": "object",
                "properties": {
                  "LEAD_SOURCE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "LEAD_SOURCE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DEFAULT_VALUE": {
                    "type": "boolean"
                  },
                  "FIELD_ORDER": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "Lead Management disabled."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "LeadSources"
        ],
        "summary": "Updates a Lead Source",
        "description": "This endpoint is used to update an existing lead source.",
        "operationId": "UpdateLeadSource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "leadSource",
            "in": "body",
            "description": "A Lead Source",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILeadSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead Source updated.",
            "schema": {
              "title": "LeadSource",
              "required": [
                "LEAD_SOURCE"
              ],
              "type": "object",
              "properties": {
                "LEAD_SOURCE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LEAD_SOURCE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DEFAULT_VALUE": {
                  "type": "boolean"
                },
                "FIELD_ORDER": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to edit Lead Sources or Lead Management disabled."
          },
          "404": {
            "description": "Lead Source not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "LeadSources"
        ],
        "summary": "Adds a Lead Source",
        "description": "This endpoint is used to define a new lead source. This endpoint is only accessible to users with administrator access.",
        "operationId": "AddLeadSource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "leadSource",
            "in": "body",
            "description": "The Lead Source to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILeadSource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Lead Source added.",
            "schema": {
              "title": "LeadSource",
              "required": [
                "LEAD_SOURCE"
              ],
              "type": "object",
              "properties": {
                "LEAD_SOURCE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LEAD_SOURCE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DEFAULT_VALUE": {
                  "type": "boolean"
                },
                "FIELD_ORDER": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to add Lead Sources or Lead Management disabled."
          }
        },
        "deprecated": false
      }
    },
    "/LeadSources/{id}": {
      "delete": {
        "tags": [
          "LeadSources"
        ],
        "summary": "Deletes a Lead Source",
        "description": "This endpoint is used to delete an existing lead source.",
        "operationId": "DeleteLeadSource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead Source's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to delete Lead Sources or Lead Management disabled."
          },
          "404": {
            "description": "Lead Source not found."
          },
          "409": {
            "description": "Lead Source cannot be deleted because it's in use or if it's the only Lead Source in you instance."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/LeadStatuses": {
      "get": {
        "tags": [
          "LeadStatuses"
        ],
        "summary": "Gets a list of Lead Statuses",
        "description": "This endpoint returns a list of the possible lead statuses that have been defined for the Insightly instance.",
        "operationId": "GetLeadStatuses",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_converted",
            "in": "query",
            "description": "Optional, by default converted status is not included, pass in \"true\" to include it in the response",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of lead statuses to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of lead statuses to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "LeadStatus",
                "required": [
                  "LEAD_STATUS"
                ],
                "type": "object",
                "properties": {
                  "LEAD_STATUS_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "LEAD_STATUS": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DEFAULT_STATUS": {
                    "type": "boolean"
                  },
                  "STATUS_TYPE": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "FIELD_ORDER": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "Lead Management disabled."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "LeadStatuses"
        ],
        "summary": "Updates a Lead Status",
        "description": "This endpoint is used to update an existing lead status. This endpoint is only accessible to users with administrator access.",
        "operationId": "UpdateLeadStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "leadStatus",
            "in": "body",
            "description": "A Lead Status",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILeadStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead Status updated.",
            "schema": {
              "title": "LeadStatus",
              "required": [
                "LEAD_STATUS"
              ],
              "type": "object",
              "properties": {
                "LEAD_STATUS_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LEAD_STATUS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DEFAULT_STATUS": {
                  "type": "boolean"
                },
                "STATUS_TYPE": {
                  "format": "int32",
                  "type": "integer"
                },
                "FIELD_ORDER": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to edit Lead Statuses or Lead Management disabled."
          },
          "404": {
            "description": "Lead Status not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "LeadStatuses"
        ],
        "summary": "Adds a Lead Status",
        "description": "This endpoint is used to add a new lead status option to the instance. This endpoint is only accessible to users with administrator access.",
        "operationId": "AddLeadStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "leadStatus",
            "in": "body",
            "description": "The Lead Status to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILeadStatus"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Lead Status added.",
            "schema": {
              "title": "LeadStatus",
              "required": [
                "LEAD_STATUS"
              ],
              "type": "object",
              "properties": {
                "LEAD_STATUS_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LEAD_STATUS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DEFAULT_STATUS": {
                  "type": "boolean"
                },
                "STATUS_TYPE": {
                  "format": "int32",
                  "type": "integer"
                },
                "FIELD_ORDER": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to add Lead Statuses or Lead Management disabled."
          }
        },
        "deprecated": false
      }
    },
    "/LeadStatuses/{id}": {
      "delete": {
        "tags": [
          "LeadStatuses"
        ],
        "summary": "Deletes a Lead Status",
        "description": "This endpoint is used to delete an existing lead status.",
        "operationId": "DeleteLeadStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Lead Status's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to delete Lead Statuses or Lead Management disabled."
          },
          "404": {
            "description": "Lead Status not found."
          },
          "409": {
            "description": "Lead Status cannot be deleted because it's in use or if you only have one OPEN and one CLOSED Lead Status in your instance."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Milestones/Search": {
      "get": {
        "tags": [
          "Milestones"
        ],
        "summary": "Gets a filtered list of Milestones.",
        "operationId": "GetMilestonesBySearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when milestone was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of milestones to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of milestones to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Milestone",
                "type": "object",
                "properties": {
                  "MILESTONE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PROJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DUE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "COMPLETED": {
                    "type": "boolean"
                  },
                  "COMPLETED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Milestones": {
      "get": {
        "tags": [
          "Milestones"
        ],
        "summary": "Gets a list of Milestones.",
        "operationId": "GetMilestones",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of milestones to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of milestones to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Milestone",
                "type": "object",
                "properties": {
                  "MILESTONE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PROJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DUE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "COMPLETED": {
                    "type": "boolean"
                  },
                  "COMPLETED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Notes/Search": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Gets a filtered list of Notes.",
        "description": "Only one optional parameter (excluding top, skip and count_total) can be specified. Simple object graphs (excluding NOTELINKS) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetNotesBySearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Optional, note title.",
            "required": false,
            "type": "string"
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "description": "Optional, id of the owner user.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when note was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the note.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of notes to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of notes to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Note",
                "required": [
                  "TITLE",
                  "LINK_SUBJECT_ID",
                  "LINK_SUBJECT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "NOTE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "type": "string"
                  },
                  "LINK_SUBJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "LINK_SUBJECT_TYPE": {
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "NOTELINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APINoteLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Notes": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Gets a list of Notes.",
        "description": "Simple object graphs (excluding NOTELINKS) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetNotes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the note.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of notes to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of notes to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Note",
                "required": [
                  "TITLE",
                  "LINK_SUBJECT_ID",
                  "LINK_SUBJECT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "NOTE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "type": "string"
                  },
                  "LINK_SUBJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "LINK_SUBJECT_TYPE": {
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "NOTELINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APINoteLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Notes"
        ],
        "summary": "Updates a Note",
        "operationId": "UpdateNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiNote",
            "in": "body",
            "description": "The Note to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APINote"
            }
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if you wish to do a partial update containing only top level properties of the Note. When true, all sub-collections are ignored.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Note updated.",
            "schema": {
              "title": "Note",
              "required": [
                "TITLE",
                "LINK_SUBJECT_ID",
                "LINK_SUBJECT_TYPE"
              ],
              "type": "object",
              "properties": {
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "BODY": {
                  "type": "string"
                },
                "LINK_SUBJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LINK_SUBJECT_TYPE": {
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "NOTELINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APINoteLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Note."
          },
          "404": {
            "description": "Note not found."
          }
        },
        "deprecated": false
      }
    },
    "/Notes/{id}": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Gets a Note",
        "operationId": "GetNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Note's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Note",
              "required": [
                "TITLE",
                "LINK_SUBJECT_ID",
                "LINK_SUBJECT_TYPE"
              ],
              "type": "object",
              "properties": {
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "BODY": {
                  "type": "string"
                },
                "LINK_SUBJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LINK_SUBJECT_TYPE": {
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "NOTELINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APINoteLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Note."
          },
          "404": {
            "description": "Note not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Notes"
        ],
        "summary": "Deletes a Note",
        "description": "",
        "operationId": "DeleteNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Note's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Note."
          },
          "404": {
            "description": "Note not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Notes/{id}/Comments": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Gets a Note's Comments",
        "operationId": "GetComments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Note's ID (NOTE_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when comment was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of comments to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of comments to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Comment",
                "type": "object",
                "properties": {
                  "COMMENT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "BODY": {
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "NOTE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "EMAIL_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Note."
          },
          "404": {
            "description": "Note not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Adds a Comment to a Note",
        "operationId": "AddComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Note's ID (NOTE_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiComment",
            "in": "body",
            "description": "The Comment to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIComment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Comment added.",
            "schema": {
              "title": "Comment",
              "type": "object",
              "properties": {
                "COMMENT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "BODY": {
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "EMAIL_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TASK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          },
          "403": {
            "description": "API User does not have access to Note."
          },
          "404": {
            "description": "Note not found."
          }
        },
        "deprecated": false
      }
    },
    "/Notes/{id}/Follow": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Gets a Follow record for the Note",
        "operationId": "GetFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Note's ID (NOTE_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Note."
          },
          "404": {
            "description": "Note not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Start following a Note",
        "operationId": "AddFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Note's ID (NOTE_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Follow added.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Note."
          },
          "404": {
            "description": "Note not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Notes"
        ],
        "summary": "Stop following a Note",
        "operationId": "DeleteFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Note's ID (NOTE_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Note."
          },
          "404": {
            "description": "Note not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Notes/{id}/NoteLinks": {
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Adds a Note Link",
        "operationId": "AddNoteLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Note's ID (NOTE_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Note Link to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APINoteLink"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Note Link added.",
            "schema": {
              "title": "NoteLink",
              "type": "object",
              "properties": {
                "NOTE_LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LEAD_ID": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Note."
          },
          "404": {
            "description": "Note not found."
          }
        },
        "deprecated": false
      }
    },
    "/Notes/{id}/NoteLinks/{linkId}": {
      "delete": {
        "tags": [
          "Notes"
        ],
        "summary": "Deletes a Note Link",
        "operationId": "DeleteNoteLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Note's ID (NOTE_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "A Note Link's ID (NOTE_LINK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Note."
          },
          "404": {
            "description": "Note or Note Link not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Notes/{id}/FileAttachments": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Gets a Note's File Attachments",
        "operationId": "GetFileAttachments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Note's ID (NOTE_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when file attachment was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of file attachments to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of file attachments to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "FileAttachment",
                "required": [
                  "FILE_NAME",
                  "CONTENT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "FILE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_NAME": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CONTENT_TYPE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FILE_SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "URL": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Note."
          },
          "404": {
            "description": "Note not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Adds a File Attachment to a Note",
        "description": "This endpoint expects multipart/form-data as the request payload. See Stack Overflow for examples of how to generate multipart requests, or see our <a href=\"http://github.com/Insightly\" target=\"_blank\">client libraries</a> for an example of how this is generated. Only one file can be added per request.",
        "operationId": "AddFileAttachment",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Note ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file part of the multipart/form-data request. Only one file can be added per request.",
            "required": true,
            "schema": {},
            "type": "file"
          },
          {
            "name": "file_name",
            "in": "formData",
            "type": "string",
            "maxLength": 500
          },
          {
            "name": "content_type",
            "in": "formData",
            "type": "string",
            "maxLength": 255
          },
          {
            "name": "file_category_id",
            "in": "formData",
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "File Attachment added.",
            "schema": {
              "title": "FileAttachment",
              "required": [
                "FILE_NAME",
                "CONTENT_TYPE"
              ],
              "type": "object",
              "properties": {
                "FILE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_NAME": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CONTENT_TYPE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FILE_SIZE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "URL": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record or storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Note."
          },
          "404": {
            "description": "Note not found."
          },
          "417": {
            "description": "File Attachment insert failed."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/Search": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Gets a filtered list of Opportunities.",
        "description": "Only one optional parameter (excluding brief, top, skip and count_total) can be specified. Simple object graphs (excluding Custom Fields, Tags, etc.) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetOpportunitiesBySearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag",
            "in": "query",
            "description": "Optional, a single tag. Performs an exact match.",
            "required": false,
            "type": "string"
          },
          {
            "name": "opportunity_name",
            "in": "query",
            "description": "Optional, opportuinty name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "opportunity_state",
            "in": "query",
            "description": "Optional, opportunity state.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Optional, category id.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pipeline_id",
            "in": "query",
            "description": "Optional, pipeline id.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "stage_id",
            "in": "query",
            "description": "Optional, stage id.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "responsible_user_id",
            "in": "query",
            "description": "Optional, responsible user id.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "description": "Optional, owner user id.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "forecast_close_date",
            "in": "query",
            "description": "Optional, forecast close date.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "actual_close_date",
            "in": "query",
            "description": "Optional, actual close date.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when opportunity was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the opportunity.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of opportunities to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of opportunities to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Opportunity",
                "required": [
                  "OPPORTUNITY_STATE"
                ],
                "type": "object",
                "properties": {
                  "OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OPPORTUNITY_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "OPPORTUNITY_DETAILS": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "PROBABILITY": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "BID_CURRENCY": {
                    "type": "string"
                  },
                  "BID_AMOUNT": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "BID_TYPE": {
                    "type": "string"
                  },
                  "BID_DURATION": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "OPPORTUNITY_VALUE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FORECAST_CLOSE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ACTUAL_CLOSE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STAGE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OPPORTUNITY_STATE": {
                    "type": "string"
                  },
                  "OPPORTUNITY_STATE_REASON_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "IMAGE_URL": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "CUSTOMFIELDS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APICustomField"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "LINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APILink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Gets a list of Opportunities.",
        "description": "Simple object graphs (excluding Custom Fields, Tags, etc.) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetOpportunities",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the opportunity.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of opportunities to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of opportunities to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Opportunity",
                "required": [
                  "OPPORTUNITY_STATE"
                ],
                "type": "object",
                "properties": {
                  "OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OPPORTUNITY_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "OPPORTUNITY_DETAILS": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "PROBABILITY": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "BID_CURRENCY": {
                    "type": "string"
                  },
                  "BID_AMOUNT": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "BID_TYPE": {
                    "type": "string"
                  },
                  "BID_DURATION": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "OPPORTUNITY_VALUE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FORECAST_CLOSE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ACTUAL_CLOSE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STAGE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OPPORTUNITY_STATE": {
                    "type": "string"
                  },
                  "OPPORTUNITY_STATE_REASON_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "IMAGE_URL": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "CUSTOMFIELDS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APICustomField"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "LINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APILink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Updates an Opportunity",
        "description": "A common source of problems when updating opportunities occurs when users omit required fields, or insert             invalid data into a field (for example by referencing an invalid CATEGORY_ID). A good troubleshooting technique             is to create a few opportunities via the web interface, with representative data, links, etc, and then access             these opportunities via the GET method, and inspect the returned object graph. Also, note: The STAGE_ID and             PIPELINE_ID properties of opportunities are read-only. (There are separate endpoints to update pipelines/stages.)",
        "operationId": "UpdateOpportunity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiOpportunity",
            "in": "body",
            "description": "An Opportunity (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIOpportunity"
            }
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if you wish to do a partial update containing only top level properties of the Opportunity. When true, all sub-collections are ignored.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity updated.",
            "schema": {
              "title": "Opportunity",
              "required": [
                "OPPORTUNITY_STATE"
              ],
              "type": "object",
              "properties": {
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "PROBABILITY": {
                  "format": "int32",
                  "type": "integer"
                },
                "BID_CURRENCY": {
                  "type": "string"
                },
                "BID_AMOUNT": {
                  "format": "int64",
                  "type": "integer"
                },
                "BID_TYPE": {
                  "type": "string"
                },
                "BID_DURATION": {
                  "format": "int32",
                  "type": "integer"
                },
                "OPPORTUNITY_VALUE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FORECAST_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "ACTUAL_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_STATE": {
                  "type": "string"
                },
                "OPPORTUNITY_STATE_REASON_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Adds an Opportunity",
        "description": "A common source of problems when creating opportunities occurs when users omit required fields, or insert             invalid data into a field (for example by referencing an invalid CATEGORY_ID). A good troubleshooting technique             is to create a few opportunities via the web interface, with representative data, links, etc, and then access             these opportunities via the GET method, and inspect the returned object graph. Also, note: The STAGE_ID and             PIPELINE_ID properties of opportunities are read-only. (There are separate endpoints to update pipelines/stages.)",
        "operationId": "AddOpportunity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiOpportunity",
            "in": "body",
            "description": "The Opportunity to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIOpportunity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Opportunity added.",
            "schema": {
              "title": "Opportunity",
              "required": [
                "OPPORTUNITY_STATE"
              ],
              "type": "object",
              "properties": {
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "PROBABILITY": {
                  "format": "int32",
                  "type": "integer"
                },
                "BID_CURRENCY": {
                  "type": "string"
                },
                "BID_AMOUNT": {
                  "format": "int64",
                  "type": "integer"
                },
                "BID_TYPE": {
                  "type": "string"
                },
                "BID_DURATION": {
                  "format": "int32",
                  "type": "integer"
                },
                "OPPORTUNITY_VALUE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FORECAST_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "ACTUAL_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_STATE": {
                  "type": "string"
                },
                "OPPORTUNITY_STATE_REASON_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Gets an Opportunity",
        "description": "Returns the Opportunity object's full graph. Prior to attempting POST and PUT operations,             we recommend using this method to fetch an existing object and make incremental changes to it.",
        "operationId": "GetOpportunity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Opportunity",
              "required": [
                "OPPORTUNITY_STATE"
              ],
              "type": "object",
              "properties": {
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "PROBABILITY": {
                  "format": "int32",
                  "type": "integer"
                },
                "BID_CURRENCY": {
                  "type": "string"
                },
                "BID_AMOUNT": {
                  "format": "int64",
                  "type": "integer"
                },
                "BID_TYPE": {
                  "type": "string"
                },
                "BID_DURATION": {
                  "format": "int32",
                  "type": "integer"
                },
                "OPPORTUNITY_VALUE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FORECAST_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "ACTUAL_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_STATE": {
                  "type": "string"
                },
                "OPPORTUNITY_STATE_REASON_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Deletes an Opportunity",
        "description": "",
        "operationId": "DeleteOpportunity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/Image": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Gets an Opportunity's Image",
        "description": "",
        "operationId": "GetImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded."
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Deletes an Opportunity's Image",
        "description": "",
        "operationId": "DeleteImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/Image/{filename}": {
      "put": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Updates an Opportunity's Image",
        "description": "This action will replace any existing Image attached to the Opportunity. Image file contents should be sent as binary data in request payload. See our <a href=\"http://github.com/Insightly\" target=\"_blank\">client libraries</a> for an example of how this is done.",
        "operationId": "UpdateImage",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "Name of Image File to be attached to Opportunity",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "body",
            "description": "File to upload",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Image updated.",
            "schema": {
              "title": "Opportunity",
              "required": [
                "OPPORTUNITY_STATE"
              ],
              "type": "object",
              "properties": {
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "PROBABILITY": {
                  "format": "int32",
                  "type": "integer"
                },
                "BID_CURRENCY": {
                  "type": "string"
                },
                "BID_AMOUNT": {
                  "format": "int64",
                  "type": "integer"
                },
                "BID_TYPE": {
                  "type": "string"
                },
                "BID_DURATION": {
                  "format": "int32",
                  "type": "integer"
                },
                "OPPORTUNITY_VALUE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FORECAST_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "ACTUAL_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_STATE": {
                  "type": "string"
                },
                "OPPORTUNITY_STATE_REASON_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          },
          "417": {
            "description": "Image update failed."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/CustomFields": {
      "put": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Updates a Custom Field",
        "operationId": "UpdateCustomField",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiCustomField",
            "in": "body",
            "description": "The Custom Field to edit (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICustomField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom Field updated.",
            "schema": {
              "title": "CustomField",
              "type": "object",
              "properties": {
                "CUSTOM_FIELD_ID": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FIELD_VALUE": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity or Custom Field not found."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/CustomFields/{customFieldId}": {
      "delete": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Deletes a Custom Field",
        "operationId": "DeleteCustomField",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customFieldId",
            "in": "path",
            "description": "A Custom Field's ID (CUSTOM_FIELD_ID)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity or Custom Field not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/Tags": {
      "post": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Adds a Tag for an Opportunity",
        "operationId": "AddTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiTag",
            "in": "body",
            "description": "The Tag to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag added.",
            "schema": {
              "title": "Tag",
              "type": "object",
              "properties": {
                "TAG_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/Tags/{tagName}": {
      "delete": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Deletes a Tag from an Opportunity",
        "operationId": "DeleteTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "tagName",
            "in": "path",
            "description": "A Tag's name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity or Tag not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/Events": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Gets an Opportunity's Events",
        "operationId": "GetEvents",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when event was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of events to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of events to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "CalendarEvent",
                "required": [
                  "TITLE",
                  "START_DATE_UTC",
                  "END_DATE_UTC"
                ],
                "type": "object",
                "properties": {
                  "EVENT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LOCATION": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DETAILS": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "START_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "END_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ALL_DAY": {
                    "type": "boolean"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "EVENTLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEventLink"
                    }
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/Notes": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Gets an Opportunity's Notes",
        "operationId": "GetNotes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORRTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when note was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of notes to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of notes to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Note",
                "required": [
                  "TITLE",
                  "LINK_SUBJECT_ID",
                  "LINK_SUBJECT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "NOTE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "type": "string"
                  },
                  "LINK_SUBJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "LINK_SUBJECT_TYPE": {
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "NOTELINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APINoteLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Adds a Note to an Opportunity.",
        "operationId": "AddNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiNote",
            "in": "body",
            "description": "The Note to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APINote"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Note added.",
            "schema": {
              "title": "Note",
              "required": [
                "TITLE",
                "LINK_SUBJECT_ID",
                "LINK_SUBJECT_TYPE"
              ],
              "type": "object",
              "properties": {
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "BODY": {
                  "type": "string"
                },
                "LINK_SUBJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LINK_SUBJECT_TYPE": {
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "NOTELINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APINoteLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/Links": {
      "put": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Updates a Link",
        "operationId": "UpdateLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Link to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Link updated.",
            "schema": {
              "title": "Link",
              "type": "object",
              "properties": {
                "LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ROLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAILS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity or Link not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Adds a Link",
        "operationId": "AddLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Link to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILink"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Link added.",
            "schema": {
              "title": "Link",
              "type": "object",
              "properties": {
                "LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ROLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAILS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/Links/{linkId}": {
      "delete": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Deletes a Link",
        "operationId": "DeleteLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "A Link's ID (LINK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity or Link not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/Follow": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Gets a Follow record for the Opportunity",
        "operationId": "GetFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Start following an Opportunity",
        "operationId": "AddFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Follow added.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Stop following an Opportunity",
        "operationId": "DeleteFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/ActivitySetAssignment": {
      "post": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Adds an Activity Set to an Opportunity",
        "operationId": "AddActivitySetAssignment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Opportunity's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiActivitySetAssignment",
            "in": "body",
            "description": "The Activity Set Assignment object which contains the configuration information for the Activity Set (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIActivitySetAssignment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Activity Set assigned."
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity, Activity Set or Activities not found."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/LinkEmailAddress": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Gets the email address to use for linking with the opportunity",
        "description": "An email address to use as a maildrop for the Opportunity.",
        "operationId": "GetLinkEmailAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "LinkEmailAddress",
              "type": "object",
              "properties": {
                "EMAIL": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/Pipeline": {
      "put": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Changes current pipeline for the opportunity.",
        "operationId": "UpdatePipeline",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiPipelineChange",
            "in": "body",
            "description": "Pipeline change parameters (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPipelineChange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity updated.",
            "schema": {
              "title": "Opportunity",
              "required": [
                "OPPORTUNITY_STATE"
              ],
              "type": "object",
              "properties": {
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "PROBABILITY": {
                  "format": "int32",
                  "type": "integer"
                },
                "BID_CURRENCY": {
                  "type": "string"
                },
                "BID_AMOUNT": {
                  "format": "int64",
                  "type": "integer"
                },
                "BID_TYPE": {
                  "type": "string"
                },
                "BID_DURATION": {
                  "format": "int32",
                  "type": "integer"
                },
                "OPPORTUNITY_VALUE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FORECAST_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "ACTUAL_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_STATE": {
                  "type": "string"
                },
                "OPPORTUNITY_STATE_REASON_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity, Pipeline or Pipeline Stage not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Clears pipeline for the opportunity.",
        "operationId": "DeletePipeline",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded.",
            "schema": {
              "title": "Opportunity",
              "required": [
                "OPPORTUNITY_STATE"
              ],
              "type": "object",
              "properties": {
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "PROBABILITY": {
                  "format": "int32",
                  "type": "integer"
                },
                "BID_CURRENCY": {
                  "type": "string"
                },
                "BID_AMOUNT": {
                  "format": "int64",
                  "type": "integer"
                },
                "BID_TYPE": {
                  "type": "string"
                },
                "BID_DURATION": {
                  "format": "int32",
                  "type": "integer"
                },
                "OPPORTUNITY_VALUE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FORECAST_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "ACTUAL_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_STATE": {
                  "type": "string"
                },
                "OPPORTUNITY_STATE_REASON_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/PipelineStage": {
      "put": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Changes current pipeline stage for the opportunity.",
        "operationId": "UpdatePipelineStage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiStageChange",
            "in": "body",
            "description": "Pipeline stage change parameters (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPipelineStageChange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity updated.",
            "schema": {
              "title": "Opportunity",
              "required": [
                "OPPORTUNITY_STATE"
              ],
              "type": "object",
              "properties": {
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "PROBABILITY": {
                  "format": "int32",
                  "type": "integer"
                },
                "BID_CURRENCY": {
                  "type": "string"
                },
                "BID_AMOUNT": {
                  "format": "int64",
                  "type": "integer"
                },
                "BID_TYPE": {
                  "type": "string"
                },
                "BID_DURATION": {
                  "format": "int32",
                  "type": "integer"
                },
                "OPPORTUNITY_VALUE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FORECAST_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "ACTUAL_CLOSE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_STATE": {
                  "type": "string"
                },
                "OPPORTUNITY_STATE_REASON_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity, Pipeline or Pipeline Stage not found."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/FileAttachments": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Gets an Opportunity's File Attachments",
        "operationId": "GetFileAttachments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when file attachment was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of file attachments to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of file attachments to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "FileAttachment",
                "required": [
                  "FILE_NAME",
                  "CONTENT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "FILE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_NAME": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CONTENT_TYPE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FILE_SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "URL": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Adds a File Attachment to an Opportunity",
        "description": "This endpoint expects multipart/form-data as the request payload. See Stack Overflow for examples of how to generate multipart requests, or see our <a href=\"http://github.com/Insightly\" target=\"_blank\">client libraries</a> for an example of how this is generated. Only one file can be added per request.",
        "operationId": "AddFileAttachment",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID (OPPORTUNITY_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file part of the multipart/form-data request. Only one file can be added per request.",
            "required": true,
            "schema": {},
            "type": "file"
          },
          {
            "name": "file_name",
            "in": "formData",
            "type": "string",
            "maxLength": 500
          },
          {
            "name": "content_type",
            "in": "formData",
            "type": "string",
            "maxLength": 255
          },
          {
            "name": "file_category_id",
            "in": "formData",
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "File Attachment added.",
            "schema": {
              "title": "FileAttachment",
              "required": [
                "FILE_NAME",
                "CONTENT_TYPE"
              ],
              "type": "object",
              "properties": {
                "FILE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_NAME": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CONTENT_TYPE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FILE_SIZE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "URL": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record or storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          },
          "417": {
            "description": "File Attachment insert failed."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/Emails": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Gets a list of Opportunity's Emails",
        "operationId": "GetEmails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when email was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of emails to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of emails to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Email",
                "type": "object",
                "properties": {
                  "EMAIL_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "GMAIL_MESSAGE_ID": {
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "EMAIL_FROM": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_TO": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_CC": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SUBJECT": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY_EXTRACT": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FORMAT": {
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "EMAILLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEmailLink"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/Tasks": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Gets a list of Opportunity's Tasks",
        "operationId": "GetTasks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when task was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of tasks to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of tasks to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Task",
                "required": [
                  "TITLE",
                  "PUBLICLY_VISIBLE",
                  "COMPLETED"
                ],
                "type": "object",
                "properties": {
                  "TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DUE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "COMPLETED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "COMPLETED": {
                    "type": "boolean"
                  },
                  "PROJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "MILESTONE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STAGE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DETAILS": {
                    "type": "string"
                  },
                  "STATUS": {
                    "type": "string"
                  },
                  "PRIORITY": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PERCENT_COMPLETE": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "START_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ASSIGNED_BY_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PARENT_TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_VISIBLE": {
                    "type": "boolean"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "ASSIGNED_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "ASSIGNED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "RECURRENCE": {
                    "type": "string"
                  },
                  "TASKLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITaskLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      }
    },
    "/Opportunities/{id}/StateHistory": {
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Gets the history of States and Reasons for an Opportunity.",
        "operationId": "GetStateHistory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "OpportunityState",
                "type": "object",
                "properties": {
                  "OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DATE_CHANGED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "FOR_OPPORTUNITY_STATE": {
                    "type": "string"
                  },
                  "STATE_REASON_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STATE_REASON": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Opportunity."
          },
          "404": {
            "description": "Opportunity not found."
          }
        },
        "deprecated": false
      }
    },
    "/OpportunityCategories": {
      "get": {
        "tags": [
          "OpportunityCategories"
        ],
        "summary": "Gets a list of Opportunity Categories",
        "description": "This read only endpoint returns a list of opportunity categories set up for the Insightly instance.",
        "operationId": "GetOpportunityCategories",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of categories to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of categories to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Category",
                "required": [
                  "CATEGORY_NAME",
                  "BACKGROUND_COLOR"
                ],
                "type": "object",
                "properties": {
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "CATEGORY_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ACTIVE": {
                    "type": "boolean"
                  },
                  "BACKGROUND_COLOR": {
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "OpportunityCategories"
        ],
        "summary": "Updates an Opportunity Category",
        "description": "This endpoint is used to update an existing opportunity category (for example, to change the background color for its label in the user interace). This endpoint is only accessible to users with administrator permission.",
        "operationId": "UpdateOpportunityCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "body",
            "description": "An Opportunity Category (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity Category updated.",
            "schema": {
              "title": "Category",
              "required": [
                "CATEGORY_NAME",
                "BACKGROUND_COLOR"
              ],
              "type": "object",
              "properties": {
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CATEGORY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "BACKGROUND_COLOR": {
                  "maxLength": 6,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to edit Opportunity Categories."
          },
          "404": {
            "description": "Opportunity Category not found."
          },
          "409": {
            "description": "Opportunity Category cannot be updated because it has been deactivated."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "OpportunityCategories"
        ],
        "summary": "Adds an Opportunity Category",
        "description": "This endpoint is used to create a new opportunity category. This endpoint is only accessible to users with administrator permission.",
        "operationId": "AddOpportunityCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "body",
            "description": "The Opportunity Category to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Opportunity Category added.",
            "schema": {
              "title": "Category",
              "required": [
                "CATEGORY_NAME",
                "BACKGROUND_COLOR"
              ],
              "type": "object",
              "properties": {
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CATEGORY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "BACKGROUND_COLOR": {
                  "maxLength": 6,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to add Opportunity Categories."
          }
        },
        "deprecated": false
      }
    },
    "/OpportunityCategories/{id}": {
      "get": {
        "tags": [
          "OpportunityCategories"
        ],
        "summary": "Gets an Opportunity Category",
        "description": "This endpoint returns the graph for a specific opportunity category",
        "operationId": "GetOpportunityCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity Category's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Category",
              "required": [
                "CATEGORY_NAME",
                "BACKGROUND_COLOR"
              ],
              "type": "object",
              "properties": {
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CATEGORY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "BACKGROUND_COLOR": {
                  "maxLength": 6,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "404": {
            "description": "Opportunity Category not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "OpportunityCategories"
        ],
        "summary": "Deactivates an Opportunity Category",
        "description": "The endpoint is used to deactivate an existing opportunity category. This endpoint is only accessible to users with administrator permission.",
        "operationId": "DeleteOpportunityCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Opportunity Category's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Deactivation succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to deactivate Opportunity Categories."
          },
          "404": {
            "description": "Opportunity Category not found."
          },
          "409": {
            "description": "Opportunity Category cannot be deactivated because it's in use or already deactivated."
          },
          "417": {
            "description": "Deactivation failed."
          }
        },
        "deprecated": false
      }
    },
    "/OpportunityStateReasons": {
      "get": {
        "tags": [
          "OpportunityStateReasons"
        ],
        "summary": "Gets a list of Opportunity State Reasons",
        "description": "This endpoint returns a list of opportunity state reasons set up for the Insightly instance.            This is a read only endpoint, so to add or update opportunity state reasons, you will need to do that via the web app.            Opportunity state reasons are used to indicate why the opportunity state was set to its current value.            For example, you can use this to indicate why you lost a particular sale.",
        "operationId": "GetOpportunityStateReasons",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of states to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of states to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "OpportunityStateReason",
                "type": "object",
                "properties": {
                  "STATE_REASON_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STATE_REASON": {
                    "type": "string"
                  },
                  "FOR_OPPORTUNITY_STATE": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/Search": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Gets a filtered list of Organisations.",
        "description": "Only one optional parameter (excluding brief, top, skip and count_total) can be specified. Simple object graphs (excluding ADDRESSES, CONTACTINFOS, etc.) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetOrganisationsBySearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Optional, email address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "email_domain",
            "in": "query",
            "description": "Optional, email domain.",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Optional, a single tag. Performs an exact match.",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone_number",
            "in": "query",
            "description": "Optional, phone number.",
            "required": false,
            "type": "string"
          },
          {
            "name": "organisation_name",
            "in": "query",
            "description": "Optional, name of the organisation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "city",
            "in": "query",
            "description": "Optional, name of the city from organisation address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Optional, state from the organisation address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "postcode",
            "in": "query",
            "description": "Optional, postal code from the organisation address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "country",
            "in": "query",
            "description": "Optional, name of the country from organisation address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when organisation was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the organisation.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of organisations to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of organisations to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Organisation",
                "required": [
                  "ORGANISATION_NAME"
                ],
                "type": "object",
                "properties": {
                  "ORGANISATION_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "ORGANISATION_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BACKGROUND": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "IMAGE_URL": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "CUSTOMFIELDS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APICustomField"
                    }
                  },
                  "ADDRESSES": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIAddress"
                    }
                  },
                  "CONTACTINFOS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIContactInfo"
                    }
                  },
                  "DATES": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIOrganisationDate"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "LINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APILink"
                    }
                  },
                  "ORGANISATIONLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIOrganisationLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  },
                  "SOCIAL_LINKEDIN": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SOCIAL_FACEBOOK": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SOCIAL_TWITTER": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Gets a list of Organisations.",
        "description": "Simple object graphs (excluding ADDRESSES, CONTACTINFOS, etc.) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetOrganisations",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the organisation.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of organisations to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of organisations to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Organisation",
                "required": [
                  "ORGANISATION_NAME"
                ],
                "type": "object",
                "properties": {
                  "ORGANISATION_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "ORGANISATION_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BACKGROUND": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "IMAGE_URL": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "CUSTOMFIELDS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APICustomField"
                    }
                  },
                  "ADDRESSES": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIAddress"
                    }
                  },
                  "CONTACTINFOS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIContactInfo"
                    }
                  },
                  "DATES": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIOrganisationDate"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "LINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APILink"
                    }
                  },
                  "ORGANISATIONLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIOrganisationLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  },
                  "SOCIAL_LINKEDIN": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SOCIAL_FACEBOOK": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SOCIAL_TWITTER": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Organisations"
        ],
        "summary": "Updates an Organisation",
        "description": "If you have trouble updating an organisation, try accessing the organisation via the GET request to inspect its fields and sub-elements. A common source of            problems with write/update requests occurs when users either omit required fields, or insert invalid data into a field (for example, by referring a            CATEGORY_ID or LINK_ID which does not exist.",
        "operationId": "UpdateOrganisation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiOrganisation",
            "in": "body",
            "description": "An Organisation (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIOrganisation"
            }
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if you wish to do a partial update containing only top level properties of the Organisation. When true, all sub-collections are ignored.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Organisation updated.",
            "schema": {
              "title": "Organisation",
              "required": [
                "ORGANISATION_NAME"
              ],
              "type": "object",
              "properties": {
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "BACKGROUND": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "ADDRESSES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIAddress"
                  }
                },
                "CONTACTINFOS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactInfo"
                  }
                },
                "DATES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIOrganisationDate"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "ORGANISATIONLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIOrganisationLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                },
                "SOCIAL_LINKEDIN": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_FACEBOOK": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_TWITTER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Organisations"
        ],
        "summary": "Adds an Organisation",
        "description": "If you have trouble with creating an organisation, try creating organisations via the web interface, and then access those organisations via the API. This way you            can see examples of the fields and sub-elements attached to the object. A common source of problems during write/update request is caused when users omit            required fields, or insert invalid data in a field (e.g. reference a CATEGORY_ID that does not exist in the user's Insightly instance.",
        "operationId": "AddOrganisation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiOrganisation",
            "in": "body",
            "description": "The Organisation to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIOrganisation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Organisation added.",
            "schema": {
              "title": "Organisation",
              "required": [
                "ORGANISATION_NAME"
              ],
              "type": "object",
              "properties": {
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "BACKGROUND": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "ADDRESSES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIAddress"
                  }
                },
                "CONTACTINFOS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactInfo"
                  }
                },
                "DATES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIOrganisationDate"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "ORGANISATIONLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIOrganisationLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                },
                "SOCIAL_LINKEDIN": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_FACEBOOK": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_TWITTER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Gets an Organisation",
        "description": "",
        "operationId": "GetOrganisation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Organisation",
              "required": [
                "ORGANISATION_NAME"
              ],
              "type": "object",
              "properties": {
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "BACKGROUND": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "ADDRESSES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIAddress"
                  }
                },
                "CONTACTINFOS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactInfo"
                  }
                },
                "DATES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIOrganisationDate"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "ORGANISATIONLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIOrganisationLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                },
                "SOCIAL_LINKEDIN": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_FACEBOOK": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_TWITTER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Organisations"
        ],
        "summary": "Deletes an Organisation",
        "description": "",
        "operationId": "DeleteOrganisation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Image": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Gets an Organisations's Image",
        "operationId": "GetImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded."
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Organisations"
        ],
        "summary": "Deletes an Organisation's Image",
        "description": "",
        "operationId": "DeleteImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Image/{filename}": {
      "put": {
        "tags": [
          "Organisations"
        ],
        "summary": "Updates an Organisation's Image",
        "description": "This action will replace any existing Image attached to the Organisation. Image file contents should be sent as binary data in request payload. See our <a href=\"http://github.com/Insightly\" target=\"_blank\">client libraries</a> for an example of how this is done.",
        "operationId": "UpdateImage",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "Name of Image File to be attached to Organisation",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "body",
            "description": "File to upload",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Image updated.",
            "schema": {
              "title": "Organisation",
              "required": [
                "ORGANISATION_NAME"
              ],
              "type": "object",
              "properties": {
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "BACKGROUND": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "ADDRESSES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIAddress"
                  }
                },
                "CONTACTINFOS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIContactInfo"
                  }
                },
                "DATES": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIOrganisationDate"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "ORGANISATIONLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APIOrganisationLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                },
                "SOCIAL_LINKEDIN": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_FACEBOOK": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "SOCIAL_TWITTER": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Contact not found."
          },
          "417": {
            "description": "Image update failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Addresses": {
      "put": {
        "tags": [
          "Organisations"
        ],
        "summary": "Updates an Address",
        "operationId": "UpdateAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiAddress",
            "in": "body",
            "description": "The Address to update (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address updated.",
            "schema": {
              "title": "Address",
              "required": [
                "ADDRESS_TYPE"
              ],
              "type": "object",
              "properties": {
                "ADDRESS_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ADDRESS_TYPE": {
                  "type": "string"
                },
                "STREET": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "CITY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "STATE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "POSTCODE": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "COUNTRY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Address not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Organisations"
        ],
        "summary": "Adds an Address",
        "description": "Limited to two addresses, one Shipping Address and one Billing Address. For more information, please refer to Body Schema.",
        "operationId": "AddAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiAddress",
            "in": "body",
            "description": "The Address to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIAddress"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Address added.",
            "schema": {
              "title": "Address",
              "required": [
                "ADDRESS_TYPE"
              ],
              "type": "object",
              "properties": {
                "ADDRESS_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ADDRESS_TYPE": {
                  "type": "string"
                },
                "STREET": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "CITY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "STATE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "POSTCODE": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "COUNTRY": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Addresses/{addressId}": {
      "delete": {
        "tags": [
          "Organisations"
        ],
        "summary": "Deletes an Address",
        "operationId": "DeleteAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "An Address' ID (ADDRESS_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Address not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/ContactInfos": {
      "put": {
        "tags": [
          "Organisations"
        ],
        "summary": "Updates a Contact Info",
        "operationId": "UpdateContactInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiContactInfo",
            "in": "body",
            "description": "The Contact Info to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIContactInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organisation Info updated.",
            "schema": {
              "title": "ContactInfo",
              "required": [
                "TYPE",
                "DETAIL"
              ],
              "type": "object",
              "properties": {
                "CONTACT_INFO_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TYPE": {
                  "type": "string"
                },
                "SUBTYPE": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "LABEL": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAIL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Contact Info not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Organisations"
        ],
        "summary": "Adds a Contact Info",
        "description": "Limited to two Phone Numbers and one Website. For more information, please refer to Body Schema.",
        "operationId": "AddContactInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiContactInfo",
            "in": "body",
            "description": "The Contact Info to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIContactInfo"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact Info added.",
            "schema": {
              "title": "ContactInfo",
              "required": [
                "TYPE",
                "DETAIL"
              ],
              "type": "object",
              "properties": {
                "CONTACT_INFO_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TYPE": {
                  "type": "string"
                },
                "SUBTYPE": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "LABEL": {
                  "maxLength": 50,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAIL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/ContactInfos/{contactInfoId}": {
      "delete": {
        "tags": [
          "Organisations"
        ],
        "summary": "Deletes a Contact Info",
        "operationId": "DeleteContactInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "contactInfoId",
            "in": "path",
            "description": "A Contact Info's ID (CONTACT_INFO_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Contact Info not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Dates": {
      "put": {
        "tags": [
          "Organisations"
        ],
        "summary": "Updates an Organisation Date",
        "operationId": "UpdateDate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiDate",
            "in": "body",
            "description": "The Organisation Date to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIOrganisationDate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Date updated.",
            "schema": {
              "title": "OrganisationDate",
              "type": "object",
              "properties": {
                "DATE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OCCASION_NAME": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "OCCASION_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "REPEAT_YEARLY": {
                  "type": "boolean"
                },
                "CREATE_TASK_YEARLY": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Date not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Organisations"
        ],
        "summary": "Adds an Organisation Date",
        "operationId": "AddDate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiDate",
            "in": "body",
            "description": "The Organisation Date to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIOrganisationDate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Date added.",
            "schema": {
              "title": "OrganisationDate",
              "type": "object",
              "properties": {
                "DATE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OCCASION_NAME": {
                  "maxLength": 128,
                  "minLength": 0,
                  "type": "string"
                },
                "OCCASION_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "REPEAT_YEARLY": {
                  "type": "boolean"
                },
                "CREATE_TASK_YEARLY": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Dates/{dateId}": {
      "delete": {
        "tags": [
          "Organisations"
        ],
        "summary": "Deletes an Organisation Date",
        "operationId": "DeleteDate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dateId",
            "in": "path",
            "description": "An Organisation Date's ID (DATE_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Date not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/CustomFields": {
      "put": {
        "tags": [
          "Organisations"
        ],
        "summary": "Updates a Custom Field",
        "operationId": "UpdateCustomField",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiCustomField",
            "in": "body",
            "description": "The Custom Field to edit (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICustomField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom Field updated.",
            "schema": {
              "title": "CustomField",
              "type": "object",
              "properties": {
                "CUSTOM_FIELD_ID": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FIELD_VALUE": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Custom Field not found."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/CustomFields/{customFieldId}": {
      "delete": {
        "tags": [
          "Organisations"
        ],
        "summary": "Deletes a Custom Field",
        "operationId": "DeleteCustomField",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customFieldId",
            "in": "path",
            "description": "A Custom Field's ID (CUSTOM_FIELD_ID)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Custom Field not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Tags": {
      "post": {
        "tags": [
          "Organisations"
        ],
        "summary": "Adds a Tag",
        "operationId": "AddTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiTag",
            "in": "body",
            "description": "The Tag to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag added.",
            "schema": {
              "title": "Tag",
              "type": "object",
              "properties": {
                "TAG_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Tags/{tagName}": {
      "delete": {
        "tags": [
          "Organisations"
        ],
        "summary": "Deletes a Tag",
        "operationId": "DeleteTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "tagName",
            "in": "path",
            "description": "A Tag's name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Tag not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Events": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Gets an Organisation's Events",
        "operationId": "GetEvents",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when event was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of events to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of events to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "CalendarEvent",
                "required": [
                  "TITLE",
                  "START_DATE_UTC",
                  "END_DATE_UTC"
                ],
                "type": "object",
                "properties": {
                  "EVENT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LOCATION": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DETAILS": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "START_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "END_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ALL_DAY": {
                    "type": "boolean"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "EVENTLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEventLink"
                    }
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Notes": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Gets an Organisation's Notes",
        "operationId": "GetNotes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when note was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of notes to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of notes to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Note",
                "required": [
                  "TITLE",
                  "LINK_SUBJECT_ID",
                  "LINK_SUBJECT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "NOTE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "type": "string"
                  },
                  "LINK_SUBJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "LINK_SUBJECT_TYPE": {
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "NOTELINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APINoteLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Organisations"
        ],
        "summary": "Adds a Note to an Organisation",
        "operationId": "AddNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiNote",
            "in": "body",
            "description": "The Note to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APINote"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Note added.",
            "schema": {
              "title": "Note",
              "required": [
                "TITLE",
                "LINK_SUBJECT_ID",
                "LINK_SUBJECT_TYPE"
              ],
              "type": "object",
              "properties": {
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "BODY": {
                  "type": "string"
                },
                "LINK_SUBJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LINK_SUBJECT_TYPE": {
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "NOTELINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APINoteLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Links": {
      "put": {
        "tags": [
          "Organisations"
        ],
        "summary": "Updates a Link",
        "operationId": "UpdateLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Link to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Link updated.",
            "schema": {
              "title": "Link",
              "type": "object",
              "properties": {
                "LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ROLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAILS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Link not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Organisations"
        ],
        "summary": "Adds a Link",
        "operationId": "AddLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Link to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILink"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Link added.",
            "schema": {
              "title": "Link",
              "type": "object",
              "properties": {
                "LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ROLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAILS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Links/{linkId}": {
      "delete": {
        "tags": [
          "Organisations"
        ],
        "summary": "Deletes a Link",
        "operationId": "DeleteLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "A Link's ID (LINK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Link not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Follow": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Gets a Follow record for the Organisation",
        "operationId": "GetFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Organisations"
        ],
        "summary": "Start following an Organisation",
        "operationId": "AddFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Follow added.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Organisations"
        ],
        "summary": "Stop following an Organisation",
        "operationId": "DeleteFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/ActivitySetAssignment": {
      "post": {
        "tags": [
          "Organisations"
        ],
        "summary": "Adds an Activity Set to an Organisation",
        "operationId": "AddActivitySetAssignment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Organisaton's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiActivitySetAssignment",
            "in": "body",
            "description": "The Activity Set Assignment object which contains the configuration information for the Activity Set",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIActivitySetAssignment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Activity Set assigned."
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisaton."
          },
          "404": {
            "description": "Organisaton, Activity Set or Activities not found."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/OrganisationLinks": {
      "put": {
        "tags": [
          "Organisations"
        ],
        "summary": "Updates an Organisation Link",
        "operationId": "UpdateOrganisationLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Organisation Link to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIOrganisationLink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organisation Link updated.",
            "schema": {
              "title": "OrganisationLink",
              "type": "object",
              "properties": {
                "ORG_LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "FIRST_ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "RELATIONSHIP_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DETAILS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Organisation Link not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Organisations"
        ],
        "summary": "Adds an Organisation Link",
        "operationId": "AddOrganisationLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Organisation Link to add (just include the JSON object in the request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIOrganisationLink"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Organisation Link added.",
            "schema": {
              "title": "OrganisationLink",
              "type": "object",
              "properties": {
                "ORG_LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "FIRST_ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "RELATIONSHIP_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DETAILS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/OrganisationLinks/{linkId}": {
      "delete": {
        "tags": [
          "Organisations"
        ],
        "summary": "Deletes an Organisation Link",
        "operationId": "DeleteOrganisationLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "An Organisation Link's ID (ORG_LINK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation or Organisation Link not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/FileAttachments": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Gets an Organisation's File Attachments",
        "operationId": "GetFileAttachments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when file attachment was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of file attachments to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of file attachments to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "FileAttachment",
                "required": [
                  "FILE_NAME",
                  "CONTENT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "FILE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_NAME": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CONTENT_TYPE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FILE_SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "URL": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Organisations"
        ],
        "summary": "Adds a File Attachment to an Organisation",
        "description": "This endpoint expects multipart/form-data as the request payload. See Stack Overflow for examples of how to generate multipart requests, or see our <a href=\"http://github.com/Insightly\" target=\"_blank\">client libraries</a> for an example of how this is generated. Only one file can be added per request.",
        "operationId": "AddFileAttachment",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID (ORGANISATION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file part of the multipart/form-data request. Only one file can be added per request.",
            "required": true,
            "schema": {},
            "type": "file"
          },
          {
            "name": "file_name",
            "in": "formData",
            "type": "string",
            "maxLength": 500
          },
          {
            "name": "content_type",
            "in": "formData",
            "type": "string",
            "maxLength": 255
          },
          {
            "name": "file_category_id",
            "in": "formData",
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "File Attachment added.",
            "schema": {
              "title": "FileAttachment",
              "required": [
                "FILE_NAME",
                "CONTENT_TYPE"
              ],
              "type": "object",
              "properties": {
                "FILE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_NAME": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CONTENT_TYPE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FILE_SIZE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "URL": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record or storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          },
          "417": {
            "description": "File Attachment insert failed."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Emails": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Gets a list of Organisation's Emails",
        "operationId": "GetEmails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when email was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of emails to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of emails to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Email",
                "type": "object",
                "properties": {
                  "EMAIL_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "GMAIL_MESSAGE_ID": {
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "EMAIL_FROM": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_TO": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_CC": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SUBJECT": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY_EXTRACT": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FORMAT": {
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "EMAILLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEmailLink"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      }
    },
    "/Organisations/{id}/Tasks": {
      "get": {
        "tags": [
          "Organisations"
        ],
        "summary": "Gets a list of Organisation's Tasks",
        "operationId": "GetTasks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An Organisation's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when task was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of tasks to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of tasks to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Task",
                "required": [
                  "TITLE",
                  "PUBLICLY_VISIBLE",
                  "COMPLETED"
                ],
                "type": "object",
                "properties": {
                  "TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DUE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "COMPLETED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "COMPLETED": {
                    "type": "boolean"
                  },
                  "PROJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "MILESTONE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STAGE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DETAILS": {
                    "type": "string"
                  },
                  "STATUS": {
                    "type": "string"
                  },
                  "PRIORITY": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PERCENT_COMPLETE": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "START_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ASSIGNED_BY_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PARENT_TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_VISIBLE": {
                    "type": "boolean"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "ASSIGNED_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "ASSIGNED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "RECURRENCE": {
                    "type": "string"
                  },
                  "TASKLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITaskLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Organisation."
          },
          "404": {
            "description": "Organisation not found."
          }
        },
        "deprecated": false
      }
    },
    "/Permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Gets the Permissions for a User",
        "description": "Permissions determine if an individual user can read, edit, delete, or create records of a given object type.",
        "operationId": "GetPermissions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "$ref": "#/definitions/APIPermissions"
            }
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Pipelines/{id}": {
      "get": {
        "tags": [
          "Pipelines"
        ],
        "summary": "Gets a Pipeline",
        "description": "This endpoint returns the graph for a specific pipeline.",
        "operationId": "GetPipeline",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Pipeline's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "404": {
            "description": "Pipeline not found."
          }
        },
        "deprecated": false
      }
    },
    "/Pipelines": {
      "get": {
        "tags": [
          "Pipelines"
        ],
        "summary": "Gets a list of Pipelines",
        "description": "This read only endpoint returns a list of pipelines that have been set up for the Insightly instance.            Pipelines can be defined for both projects and opportunities, and are used to track the progression of projects and opportunities.            To create and update pipelines, you'll need to go to the web app (API access is read-only).",
        "operationId": "GetPipelines",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of pipelines to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of pipelines to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Pipeline",
                "type": "object",
                "properties": {
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_NAME": {
                    "type": "string"
                  },
                  "FOR_OPPORTUNITIES": {
                    "type": "boolean"
                  },
                  "FOR_PROJECTS": {
                    "type": "boolean"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/PipelineStages/{id}": {
      "get": {
        "tags": [
          "PipelineStages"
        ],
        "summary": "Gets a Pipeline Stage",
        "description": "This endpoint returns the graph for a specific pipeline stage.",
        "operationId": "GetPipelineStage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Pipeline Stage's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "PipelineStage",
              "type": "object",
              "properties": {
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_NAME": {
                  "type": "string"
                },
                "STAGE_ORDER": {
                  "format": "int32",
                  "type": "integer"
                },
                "ACTIVITYSET_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "404": {
            "description": "Pipeline Stage not found."
          }
        },
        "deprecated": false
      }
    },
    "/PipelineStages": {
      "get": {
        "tags": [
          "PipelineStages"
        ],
        "summary": "Gets a list of Pipeline Stages",
        "description": "This read only endpoint returns a list of the pipeline stages that have been set up for the Insightly instance.            Pipeline stages are used to indicate where a project or opportunity is in terms of its progression.            For example, stage 1 for the sales pipeline might be \"initial contact\", while stage 4 might be \"generating quote\".            The API for pipeline stages is read only, so to create or update pipeline stages, you'll need to use the web app to do so.",
        "operationId": "GetPipelineStages",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of stages to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of stages to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "PipelineStage",
                "type": "object",
                "properties": {
                  "STAGE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STAGE_NAME": {
                    "type": "string"
                  },
                  "STAGE_ORDER": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "ACTIVITYSET_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/ProjectCategories": {
      "get": {
        "tags": [
          "ProjectCategories"
        ],
        "summary": "Gets a list of Project Categories",
        "description": "This read only endpoint returns a list of the project categories that have been configured for the Insightly instance.",
        "operationId": "GetProjectCategories",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of categories to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of categories to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Category",
                "required": [
                  "CATEGORY_NAME",
                  "BACKGROUND_COLOR"
                ],
                "type": "object",
                "properties": {
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "CATEGORY_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ACTIVE": {
                    "type": "boolean"
                  },
                  "BACKGROUND_COLOR": {
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "ProjectCategories"
        ],
        "summary": "Updates a Project Category",
        "description": "This endpoint is used to update an existing project category. This endpoint is only accessible to users with administrator permission.",
        "operationId": "UpdateProjectCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "body",
            "description": "A Project Category (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project Category updated.",
            "schema": {
              "title": "Category",
              "required": [
                "CATEGORY_NAME",
                "BACKGROUND_COLOR"
              ],
              "type": "object",
              "properties": {
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CATEGORY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "BACKGROUND_COLOR": {
                  "maxLength": 6,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to edit Project Categories."
          },
          "404": {
            "description": "Project Category not found."
          },
          "409": {
            "description": "Project Category cannot be updated because it has been deactivated."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "ProjectCategories"
        ],
        "summary": "Adds a Project Category",
        "description": "This endpoint is used to create a new project category. This endpoint is only accessible to users with administrator permission.",
        "operationId": "AddProjectCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "body",
            "description": "The Project Category to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Project Category added.",
            "schema": {
              "title": "Category",
              "required": [
                "CATEGORY_NAME",
                "BACKGROUND_COLOR"
              ],
              "type": "object",
              "properties": {
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CATEGORY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "BACKGROUND_COLOR": {
                  "maxLength": 6,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to add Project Categories."
          }
        },
        "deprecated": false
      }
    },
    "/ProjectCategories/{id}": {
      "get": {
        "tags": [
          "ProjectCategories"
        ],
        "summary": "Gets a Project Category",
        "description": "This endpoint is used to retrieve the graph for a specific project category.",
        "operationId": "GetProjectCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project Category's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Category",
              "required": [
                "CATEGORY_NAME",
                "BACKGROUND_COLOR"
              ],
              "type": "object",
              "properties": {
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CATEGORY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "BACKGROUND_COLOR": {
                  "maxLength": 6,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "404": {
            "description": "Project Category not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "ProjectCategories"
        ],
        "summary": "Deactivates a Project Category",
        "description": "This endpoint is used to deactivate an existing project category. This endpoint is only accessible to users with administrator permission.",
        "operationId": "DeleteProjectCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project Category's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Deactivation succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to deactivate Project Categories."
          },
          "404": {
            "description": "Project Category not found."
          },
          "409": {
            "description": "Project Category cannot be deactivated because it's in use or already deactivated."
          },
          "417": {
            "description": "Deactivation failed."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/Search": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets a filtered list of Projects.",
        "description": "Only one optional parameter (excluding brief, top, skip and count_total) can be specified. Simple object graphs (excluding CUSTOMFIELDS, TAGS, etc.) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetProjectsBySearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tag",
            "in": "query",
            "description": "Optional, a single tag. Performs an exact match.",
            "required": false,
            "type": "string"
          },
          {
            "name": "project_name",
            "in": "query",
            "description": "Optional, project name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Optional, project status.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Optional, category id.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pipeline_id",
            "in": "query",
            "description": "Optional, pipeline id.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "stage_id",
            "in": "query",
            "description": "Optional, stage id.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "responsible_user_id",
            "in": "query",
            "description": "Optional, responsible user id.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "description": "Optional, owner user id.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when project was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the project.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of projects to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of projects to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Project",
                "required": [
                  "PROJECT_NAME",
                  "STATUS"
                ],
                "type": "object",
                "properties": {
                  "PROJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PROJECT_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "STATUS": {
                    "type": "string"
                  },
                  "PROJECT_DETAILS": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STARTED_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "COMPLETED_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "IMAGE_URL": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STAGE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "CUSTOMFIELDS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APICustomField"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "LINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APILink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets a list of Projects.",
        "description": "Simple object graphs (excluding CUSTOMFIELDS, TAGS, etc.) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetProjects",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the project.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of projects to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of projects to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Project",
                "required": [
                  "PROJECT_NAME",
                  "STATUS"
                ],
                "type": "object",
                "properties": {
                  "PROJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PROJECT_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "STATUS": {
                    "type": "string"
                  },
                  "PROJECT_DETAILS": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STARTED_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "COMPLETED_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "IMAGE_URL": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STAGE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "CUSTOMFIELDS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APICustomField"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "LINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APILink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Updates a Project",
        "description": "A common source of problems when updating projects occurs when users omit required fields, or insert             invalid data into a field (for example by referencing an invalid CATEGORY_ID). A good troubleshooting technique             is to create a few projects via the web interface, with representative data, links, etc, and then access             these projects via the API, and inspect the returned object graph. Also, note: The STAGE_ID and PIPELINE_ID             properties of projects are read-only. (There are separate endpoints to update pipelines/stages.)",
        "operationId": "UpdateProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiProject",
            "in": "body",
            "description": "A Project (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIProject"
            }
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if you wish to do a partial update containing only top level properties of the Project. When true, all sub-collections are ignored.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Project updated.",
            "schema": {
              "title": "Project",
              "required": [
                "PROJECT_NAME",
                "STATUS"
              ],
              "type": "object",
              "properties": {
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "STATUS": {
                  "type": "string"
                },
                "PROJECT_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STARTED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "COMPLETED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Adds a Project",
        "description": "A common source of problems when creating projects occurs when users omit required fields, or insert             invalid data into a field (for example by referencing an invalid CATEGORY_ID). A good troubleshooting technique             is to create a few projects via the web interface, with representative data, links, etc, and then access             these projects via the API, and inspect the returned object graph. Also, note: The STAGE_ID and PIPELINE_ID             properties of projects are read-only. (There are separate endpoints to update pipelines/stages.)",
        "operationId": "AddProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiProject",
            "in": "body",
            "description": "The Project to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIProject"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Project added.",
            "schema": {
              "title": "Project",
              "required": [
                "PROJECT_NAME",
                "STATUS"
              ],
              "type": "object",
              "properties": {
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "STATUS": {
                  "type": "string"
                },
                "PROJECT_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STARTED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "COMPLETED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets a Project",
        "description": "",
        "operationId": "GetProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Project",
              "required": [
                "PROJECT_NAME",
                "STATUS"
              ],
              "type": "object",
              "properties": {
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "STATUS": {
                  "type": "string"
                },
                "PROJECT_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STARTED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "COMPLETED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Deletes a Project",
        "description": "",
        "operationId": "DeleteProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Image": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets a Project's Image",
        "description": "",
        "operationId": "GetImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded."
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Deletes a Project's Image",
        "description": "",
        "operationId": "DeleteImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Image updated."
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          },
          "417": {
            "description": "Image update failed."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Image/{filename}": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Updates a Project's Image",
        "description": "This action will replace any existing Image attached to the Project. Image file contents should be sent as binary data in request payload. See our <a href=\"http://github.com/Insightly\" target=\"_blank\">client libraries</a> for an example of how this is done.",
        "operationId": "UpdateImage",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "Name of Image File to be attached to Project",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "body",
            "description": "File to upload",
            "required": true,
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Image updated.",
            "schema": {
              "title": "Project",
              "required": [
                "PROJECT_NAME",
                "STATUS"
              ],
              "type": "object",
              "properties": {
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "STATUS": {
                  "type": "string"
                },
                "PROJECT_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STARTED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "COMPLETED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Invalid api key provided."
          },
          "402": {
            "description": "Storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          },
          "417": {
            "description": "Image update failed."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/CustomFields": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Updates a Custom Field",
        "operationId": "UpdateCustomField",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (Project_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiCustomField",
            "in": "body",
            "description": "The Custom Field to edit (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICustomField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom Field updated.",
            "schema": {
              "title": "CustomField",
              "type": "object",
              "properties": {
                "CUSTOM_FIELD_ID": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FIELD_VALUE": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project or Custom Field not found."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/CustomFields/{customFieldId}": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Deletes a Custom Field",
        "operationId": "DeleteCustomField",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (Project_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "customFieldId",
            "in": "path",
            "description": "A Custom Field's ID (CUSTOM_FIELD_ID)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project or Custom Field not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Tags": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Adds a Tag for a Project",
        "operationId": "AddTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiTag",
            "in": "body",
            "description": "The Tag to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag added.",
            "schema": {
              "title": "Tag",
              "type": "object",
              "properties": {
                "TAG_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Tags/{tagName}": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Deletes a Tag from a Project",
        "operationId": "DeleteTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "tagName",
            "in": "path",
            "description": "A Tag's name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project or Tag not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Events": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets a Project's Events",
        "operationId": "GetEvents",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when event was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of events to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of events to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "CalendarEvent",
                "required": [
                  "TITLE",
                  "START_DATE_UTC",
                  "END_DATE_UTC"
                ],
                "type": "object",
                "properties": {
                  "EVENT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "LOCATION": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DETAILS": {
                    "maxLength": 4000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "START_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "END_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ALL_DAY": {
                    "type": "boolean"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "EVENTLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEventLink"
                    }
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Notes": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets a Project's Notes",
        "operationId": "GetNotes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when note was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of notes to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of notes to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Note",
                "required": [
                  "TITLE",
                  "LINK_SUBJECT_ID",
                  "LINK_SUBJECT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "NOTE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "type": "string"
                  },
                  "LINK_SUBJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "LINK_SUBJECT_TYPE": {
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "NOTELINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APINoteLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Adds a Note to a Project.",
        "operationId": "AddNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiNote",
            "in": "body",
            "description": "The Note to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APINote"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Note added.",
            "schema": {
              "title": "Note",
              "required": [
                "TITLE",
                "LINK_SUBJECT_ID",
                "LINK_SUBJECT_TYPE"
              ],
              "type": "object",
              "properties": {
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "BODY": {
                  "type": "string"
                },
                "LINK_SUBJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LINK_SUBJECT_TYPE": {
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "NOTELINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APINoteLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Links": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Updates a Link for a project",
        "operationId": "UpdateLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Link to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Link updated.",
            "schema": {
              "title": "Link",
              "type": "object",
              "properties": {
                "LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ROLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAILS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project or Link not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Adds a Link to a project",
        "operationId": "AddLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Link to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APILink"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Link added.",
            "schema": {
              "title": "Link",
              "type": "object",
              "properties": {
                "LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "SECOND_OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ROLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DETAILS": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Links/{linkId}": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Deletes a Link from a project",
        "operationId": "DeleteLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "A Link's ID (LINK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project or Link not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Follow": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets a Follow record for the Project",
        "operationId": "GetFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Start following a Project",
        "operationId": "AddFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Follow added.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Stop following a Project",
        "operationId": "DeleteFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/ActivitySetAssignment": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Adds an Activity Set to a Project",
        "operationId": "AddActivitySetAssignment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiActivitySetAssignment",
            "in": "body",
            "description": "The Activity Set Assignment object which contains the configuration information for the Activity Set (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIActivitySetAssignment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Activity Set assigned."
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project, Activity Set or Activities not found."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/LinkEmailAddress": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets the email address to use for linking with the Project",
        "description": "An email address to use as a maildrop for the Project.",
        "operationId": "GetLinkEmailAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "LinkEmailAddress",
              "type": "object",
              "properties": {
                "EMAIL": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Pipeline": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Changes current pipeline for the project.",
        "operationId": "UpdatePipeline",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiPipelineChange",
            "in": "body",
            "description": "Pipeline change parameters (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPipelineChange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project updated.",
            "schema": {
              "title": "Project",
              "required": [
                "PROJECT_NAME",
                "STATUS"
              ],
              "type": "object",
              "properties": {
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "STATUS": {
                  "type": "string"
                },
                "PROJECT_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STARTED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "COMPLETED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project, Pipeline or Pipeline Stage not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Clears pipeline for the Project.",
        "operationId": "DeletePipeline",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded.",
            "schema": {
              "title": "Project",
              "required": [
                "PROJECT_NAME",
                "STATUS"
              ],
              "type": "object",
              "properties": {
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "STATUS": {
                  "type": "string"
                },
                "PROJECT_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STARTED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "COMPLETED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/PipelineStage": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Changes current pipeline stage for the project.",
        "operationId": "UpdatePipelineStage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiStageChange",
            "in": "body",
            "description": "Pipeline stage change parameters (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIPipelineStageChange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project updated.",
            "schema": {
              "title": "Project",
              "required": [
                "PROJECT_NAME",
                "STATUS"
              ],
              "type": "object",
              "properties": {
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "STATUS": {
                  "type": "string"
                },
                "PROJECT_DETAILS": {
                  "maxLength": 4000,
                  "minLength": 0,
                  "type": "string"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STARTED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "COMPLETED_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "IMAGE_URL": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_TO": {
                  "type": "string"
                },
                "VISIBLE_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "VISIBLE_USER_IDS": {
                  "type": "string"
                },
                "CUSTOMFIELDS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APICustomField"
                  }
                },
                "TAGS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITag"
                  }
                },
                "LINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APILink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project, Pipeline or Pipeline Stage not found."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Milestones": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets a list of Milestones for a Project",
        "operationId": "GetMilestones",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Milestone",
                "type": "object",
                "properties": {
                  "MILESTONE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PROJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "DUE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "COMPLETED": {
                    "type": "boolean"
                  },
                  "COMPLETED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Updates a Milestone for a Project",
        "operationId": "UpdateMilestone",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiMilestone",
            "in": "body",
            "description": "The Milestone to update (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIMilestone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Milestone updated.",
            "schema": {
              "title": "Milestone",
              "type": "object",
              "properties": {
                "MILESTONE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DUE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "COMPLETED": {
                  "type": "boolean"
                },
                "COMPLETED_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project or Milestone not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Adds a Milestone to a Project",
        "operationId": "AddMilestone",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiMilestone",
            "in": "body",
            "description": "The Milestone to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIMilestone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Milestone added.",
            "schema": {
              "title": "Milestone",
              "type": "object",
              "properties": {
                "MILESTONE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "DUE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "COMPLETED": {
                  "type": "boolean"
                },
                "COMPLETED_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Milestones/{milestoneId}": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Deletes a Milestone from a Project",
        "operationId": "DeleteMilestone",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "milestoneId",
            "in": "path",
            "description": "A Milestone's ID (MILESTONE_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project or Link not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/FileAttachments": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets a Project's File Attachments",
        "operationId": "GetFileAttachments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when file attachment was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of file attachments to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of file attachments to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "FileAttachment",
                "required": [
                  "FILE_NAME",
                  "CONTENT_TYPE"
                ],
                "type": "object",
                "properties": {
                  "FILE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_NAME": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CONTENT_TYPE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FILE_SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FILE_CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "URL": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Adds a File Attachment to a Project",
        "description": "This endpoint expects multipart/form-data as the request payload. See Stack Overflow for examples of how to generate multipart requests, or see our <a href=\"http://github.com/Insightly\" target=\"_blank\">client libraries</a> for an example of how this is generated. Only one file can be added per request.",
        "operationId": "AddFileAttachment",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID (PROJECT_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file part of the multipart/form-data request. Only one file can be added per request.",
            "required": true,
            "schema": {},
            "type": "file"
          },
          {
            "name": "file_name",
            "in": "formData",
            "type": "string",
            "maxLength": 500
          },
          {
            "name": "content_type",
            "in": "formData",
            "type": "string",
            "maxLength": 255
          },
          {
            "name": "file_category_id",
            "in": "formData",
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "File Attachment added.",
            "schema": {
              "title": "FileAttachment",
              "required": [
                "FILE_NAME",
                "CONTENT_TYPE"
              ],
              "type": "object",
              "properties": {
                "FILE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_NAME": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CONTENT_TYPE": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "FILE_SIZE": {
                  "format": "int64",
                  "type": "integer"
                },
                "FILE_CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "URL": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record or storage limit reached."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          },
          "417": {
            "description": "File Attachment insert failed."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Emails": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets a list of Project's Emails",
        "operationId": "GetEmails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when email was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of emails to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of emails to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Email",
                "type": "object",
                "properties": {
                  "EMAIL_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "GMAIL_MESSAGE_ID": {
                    "maxLength": 20,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "EMAIL_FROM": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_TO": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "EMAIL_CC": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SUBJECT": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "BODY_EXTRACT": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FORMAT": {
                    "maxLength": 5,
                    "minLength": 0,
                    "type": "string"
                  },
                  "SIZE": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "VISIBLE_TO": {
                    "type": "string"
                  },
                  "VISIBLE_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "VISIBLE_USER_IDS": {
                    "type": "string"
                  },
                  "EMAILLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APIEmailLink"
                    }
                  },
                  "TAGS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITag"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      }
    },
    "/Projects/{id}/Tasks": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Gets a list of Project's Tasks",
        "operationId": "GetTasks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Project's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when task was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of tasks to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of tasks to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "true if only top level properties needs to be returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Task",
                "required": [
                  "TITLE",
                  "PUBLICLY_VISIBLE",
                  "COMPLETED"
                ],
                "type": "object",
                "properties": {
                  "TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DUE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "COMPLETED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "COMPLETED": {
                    "type": "boolean"
                  },
                  "PROJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "MILESTONE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STAGE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DETAILS": {
                    "type": "string"
                  },
                  "STATUS": {
                    "type": "string"
                  },
                  "PRIORITY": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PERCENT_COMPLETE": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "START_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ASSIGNED_BY_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PARENT_TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_VISIBLE": {
                    "type": "boolean"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "ASSIGNED_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "ASSIGNED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "RECURRENCE": {
                    "type": "string"
                  },
                  "TASKLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITaskLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "deprecated": false
      }
    },
    "/Relationships": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Gets a list of Relationships",
        "description": "This read only endpoint returns a list of the relationships that have been defined for the Insightly instance.            Relationships enable users to define how one Insightly object is related to another.            For example: contact A is a customer of contact B. The API only supports read access to relationships, to create or update            relationships, you'll need to do so via the web app.",
        "operationId": "GetRelationships",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of records to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of records to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Relationship",
                "type": "object",
                "properties": {
                  "RELATIONSHIP_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FORWARD_TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FORWARD": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "REVERSE_TITLE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "REVERSE": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "FOR_CONTACTS": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "boolean"
                  },
                  "FOR_ORGANISATIONS": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Gets a list of Tags used for a record type",
        "description": "This endpoint returns a list of tags associated with a record type. The endpoint expects the query parameter            record_type=contacts|leads|opportunities|organisations|projects|emails, so to fetch a list of tags associated with contacts, your query would be            /Tags?record_type=contacts",
        "operationId": "GetTags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "record_type",
            "in": "query",
            "description": "Required, filters tags by a given record type.",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of records to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of records to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Tag",
                "type": "object",
                "properties": {
                  "TAG_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid id specified."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/TaskCategories": {
      "get": {
        "tags": [
          "TaskCategories"
        ],
        "summary": "Gets a list of Task Categories",
        "description": "This read only endpoint returns a list of the task categories set up for the Insightly instance.",
        "operationId": "GetTaskCategories",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of records to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of records to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Category",
                "required": [
                  "CATEGORY_NAME",
                  "BACKGROUND_COLOR"
                ],
                "type": "object",
                "properties": {
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "CATEGORY_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ACTIVE": {
                    "type": "boolean"
                  },
                  "BACKGROUND_COLOR": {
                    "maxLength": 6,
                    "minLength": 0,
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "TaskCategories"
        ],
        "summary": "Updates a Task Category",
        "description": "This endpoint is used to update an existing task category, for example to change the background color for the task category's label in the web UI. This endpoint is only accessible to users with administrator permission.",
        "operationId": "UpdateTaskCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "body",
            "description": "A Task Category (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task Category updated.",
            "schema": {
              "title": "Category",
              "required": [
                "CATEGORY_NAME",
                "BACKGROUND_COLOR"
              ],
              "type": "object",
              "properties": {
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CATEGORY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "BACKGROUND_COLOR": {
                  "maxLength": 6,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to edit Task Categories."
          },
          "404": {
            "description": "Task Category not found."
          },
          "409": {
            "description": "Task Category cannot be updated because it has been deactivated."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "TaskCategories"
        ],
        "summary": "Adds a Task Category",
        "description": "This endpoint is used to create a new task category. This endpoint is only accessible to users with administrator permission.",
        "operationId": "AddTaskCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "body",
            "description": "The Task Category to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APICategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Task Category added.",
            "schema": {
              "title": "Category",
              "required": [
                "CATEGORY_NAME",
                "BACKGROUND_COLOR"
              ],
              "type": "object",
              "properties": {
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CATEGORY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "BACKGROUND_COLOR": {
                  "maxLength": 6,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to add Task Categories."
          }
        },
        "deprecated": false
      }
    },
    "/TaskCategories/{id}": {
      "get": {
        "tags": [
          "TaskCategories"
        ],
        "summary": "Gets a Task Category",
        "description": "This endpoint returns the graph for a specific task category.",
        "operationId": "GetTaskCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Task Category's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Category",
              "required": [
                "CATEGORY_NAME",
                "BACKGROUND_COLOR"
              ],
              "type": "object",
              "properties": {
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CATEGORY_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "BACKGROUND_COLOR": {
                  "maxLength": 6,
                  "minLength": 0,
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "404": {
            "description": "Task Category not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "TaskCategories"
        ],
        "summary": "Deactivates a Task Category",
        "description": "This endpoint is used to deactivate a task category. This endpoint is only accessible to users with administrator permission.",
        "operationId": "DeleteTaskCategory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Task Category's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Deactivation succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to deactivate Task Categories."
          },
          "404": {
            "description": "Task Category not found."
          },
          "409": {
            "description": "Task Category cannot be deactivated because it's in use or already deactivated."
          },
          "417": {
            "description": "Deactivation failed."
          }
        },
        "deprecated": false
      }
    },
    "/Tasks/Search": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Gets a filtered list of Tasks.",
        "description": "Only one optional parameter (excluding brief, top, skip and count_total) can be specified. Simple object graphs (excluding TASKLINKS) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetTasksBySearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Optional, task title.",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Optional, status of the task.",
            "required": false,
            "type": "string"
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "Optional, category id.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "owner_user_id",
            "in": "query",
            "description": "Optional, id of the owner user.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when task was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the task.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of tasks to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of tasks to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Task",
                "required": [
                  "TITLE",
                  "PUBLICLY_VISIBLE",
                  "COMPLETED"
                ],
                "type": "object",
                "properties": {
                  "TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DUE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "COMPLETED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "COMPLETED": {
                    "type": "boolean"
                  },
                  "PROJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "MILESTONE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STAGE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DETAILS": {
                    "type": "string"
                  },
                  "STATUS": {
                    "type": "string"
                  },
                  "PRIORITY": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PERCENT_COMPLETE": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "START_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ASSIGNED_BY_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PARENT_TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_VISIBLE": {
                    "type": "boolean"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "ASSIGNED_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "ASSIGNED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "RECURRENCE": {
                    "type": "string"
                  },
                  "TASKLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITaskLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Gets a list of Tasks.",
        "description": "Simple object graphs (excluding TASKLINKS) are returned if \"brief=true\" is used in the query string.",
        "operationId": "GetTasks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the task.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of tasks to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of tasks to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Task",
                "required": [
                  "TITLE",
                  "PUBLICLY_VISIBLE",
                  "COMPLETED"
                ],
                "type": "object",
                "properties": {
                  "TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TITLE": {
                    "maxLength": 500,
                    "minLength": 0,
                    "type": "string"
                  },
                  "CATEGORY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DUE_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "COMPLETED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "PUBLICLY_VISIBLE": {
                    "type": "boolean"
                  },
                  "COMPLETED": {
                    "type": "boolean"
                  },
                  "PROJECT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OPPORTUNITY_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "MILESTONE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "PIPELINE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "STAGE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DETAILS": {
                    "type": "string"
                  },
                  "STATUS": {
                    "type": "string"
                  },
                  "PRIORITY": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PERCENT_COMPLETE": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "START_DATE": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "ASSIGNED_BY_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "PARENT_TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "OWNER_VISIBLE": {
                    "type": "boolean"
                  },
                  "RESPONSIBLE_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "ASSIGNED_TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "ASSIGNED_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_DATE_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "REMINDER_SENT": {
                    "type": "boolean"
                  },
                  "RECURRENCE": {
                    "type": "string"
                  },
                  "TASKLINKS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITaskLink"
                    }
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Updates a Task",
        "description": "A common source of problems when updating tasks occurs when users omit required fields, or insert             invalid data into a field. A good troubleshooting technique             is to create a few tasks via the web interface, with representative data, links, etc, and then access             these tasks via the API, and inspect the returned object graph.",
        "operationId": "UpdateTask",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiTask",
            "in": "body",
            "description": "The Task to update (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITask"
            }
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if you wish to do a partial update containing only top level properties of the Task. When true, all sub-collections are ignored.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Task updated.",
            "schema": {
              "title": "Task",
              "required": [
                "TITLE",
                "PUBLICLY_VISIBLE",
                "COMPLETED"
              ],
              "type": "object",
              "properties": {
                "TASK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DUE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "COMPLETED_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "PUBLICLY_VISIBLE": {
                  "type": "boolean"
                },
                "COMPLETED": {
                  "type": "boolean"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "MILESTONE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DETAILS": {
                  "type": "string"
                },
                "STATUS": {
                  "type": "string"
                },
                "PRIORITY": {
                  "format": "int32",
                  "type": "integer"
                },
                "PERCENT_COMPLETE": {
                  "format": "int32",
                  "type": "integer"
                },
                "START_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "ASSIGNED_BY_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "PARENT_TASK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_VISIBLE": {
                  "type": "boolean"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "ASSIGNED_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ASSIGNED_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "REMINDER_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "REMINDER_SENT": {
                  "type": "boolean"
                },
                "RECURRENCE": {
                  "type": "string"
                },
                "TASKLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITaskLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Task."
          },
          "404": {
            "description": "Task not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Adds a Task",
        "description": "A common source of problems when creating tasks occurs when users omit required fields, or insert             invalid data into a field. A good troubleshooting technique             is to create a few tasks via the web interface, with representative data, links, etc, and then access             these tasks via the API, and inspect the returned object graph.",
        "operationId": "AddTask",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiTask",
            "in": "body",
            "description": "The Task to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITask"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Task added.",
            "schema": {
              "title": "Task",
              "required": [
                "TITLE",
                "PUBLICLY_VISIBLE",
                "COMPLETED"
              ],
              "type": "object",
              "properties": {
                "TASK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DUE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "COMPLETED_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "PUBLICLY_VISIBLE": {
                  "type": "boolean"
                },
                "COMPLETED": {
                  "type": "boolean"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "MILESTONE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DETAILS": {
                  "type": "string"
                },
                "STATUS": {
                  "type": "string"
                },
                "PRIORITY": {
                  "format": "int32",
                  "type": "integer"
                },
                "PERCENT_COMPLETE": {
                  "format": "int32",
                  "type": "integer"
                },
                "START_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "ASSIGNED_BY_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "PARENT_TASK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_VISIBLE": {
                  "type": "boolean"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "ASSIGNED_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ASSIGNED_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "REMINDER_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "REMINDER_SENT": {
                  "type": "boolean"
                },
                "RECURRENCE": {
                  "type": "string"
                },
                "TASKLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITaskLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          }
        },
        "deprecated": false
      }
    },
    "/Tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Gets a Task",
        "description": "",
        "operationId": "GetTask",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Task's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Task",
              "required": [
                "TITLE",
                "PUBLICLY_VISIBLE",
                "COMPLETED"
              ],
              "type": "object",
              "properties": {
                "TASK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TITLE": {
                  "maxLength": 500,
                  "minLength": 0,
                  "type": "string"
                },
                "CATEGORY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DUE_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "COMPLETED_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "PUBLICLY_VISIBLE": {
                  "type": "boolean"
                },
                "COMPLETED": {
                  "type": "boolean"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "MILESTONE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PIPELINE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "STAGE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DETAILS": {
                  "type": "string"
                },
                "STATUS": {
                  "type": "string"
                },
                "PRIORITY": {
                  "format": "int32",
                  "type": "integer"
                },
                "PERCENT_COMPLETE": {
                  "format": "int32",
                  "type": "integer"
                },
                "START_DATE": {
                  "format": "date-time",
                  "type": "string"
                },
                "ASSIGNED_BY_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "PARENT_TASK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OWNER_VISIBLE": {
                  "type": "boolean"
                },
                "RESPONSIBLE_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "ASSIGNED_TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ASSIGNED_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "REMINDER_DATE_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "REMINDER_SENT": {
                  "type": "boolean"
                },
                "RECURRENCE": {
                  "type": "string"
                },
                "TASKLINKS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITaskLink"
                  }
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Task."
          },
          "404": {
            "description": "Task not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Deletes a Task",
        "description": "",
        "operationId": "DeleteTask",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Task's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Task."
          },
          "404": {
            "description": "Task not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Tasks/{id}/Comments": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Gets a Task's Comments",
        "operationId": "GetComments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Task's ID (TASK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when comment was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of comments to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of comments to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Comment",
                "type": "object",
                "properties": {
                  "COMMENT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "BODY": {
                    "type": "string"
                  },
                  "OWNER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "NOTE_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "EMAIL_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TASK_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "CAN_EDIT": {
                    "type": "boolean"
                  },
                  "CAN_DELETE": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Task."
          },
          "404": {
            "description": "Task not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Adds a Comment to a task.",
        "operationId": "AddComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Task's ID (TASK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiComment",
            "in": "body",
            "description": "The Comment to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APIComment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Comment added.",
            "schema": {
              "title": "Comment",
              "type": "object",
              "properties": {
                "COMMENT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "BODY": {
                  "type": "string"
                },
                "OWNER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                },
                "NOTE_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "EMAIL_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TASK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "CAN_EDIT": {
                  "type": "boolean"
                },
                "CAN_DELETE": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "402": {
            "description": "Record limit reached."
          },
          "403": {
            "description": "API User does not have access to Task."
          },
          "404": {
            "description": "Task not found."
          }
        },
        "deprecated": false
      }
    },
    "/Tasks/{id}/Follow": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Gets a Follow record for the Task",
        "operationId": "GetFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Task's ID (TASK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Task."
          },
          "404": {
            "description": "Task not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Start following a Task",
        "operationId": "AddFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Task's ID (TASK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Follow added.",
            "schema": {
              "title": "Follow",
              "type": "object",
              "properties": {
                "FOLLOWING": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Task."
          },
          "404": {
            "description": "Task not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Stop following a Task",
        "operationId": "DeleteFollow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Task's ID (TASK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Task."
          },
          "404": {
            "description": "Task not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Tasks/{id}/TaskLinks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Adds a Task Link",
        "operationId": "AddTaskLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Task's ID (TASK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiLink",
            "in": "body",
            "description": "The Task Link to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITaskLink"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Task Link added.",
            "schema": {
              "title": "TaskLink",
              "type": "object",
              "properties": {
                "TASK_LINK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TASK_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "ORGANISATION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "OPPORTUNITY_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "PROJECT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "LEAD_ID": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Task."
          },
          "404": {
            "description": "Task not found."
          }
        },
        "deprecated": false
      }
    },
    "/Tasks/{id}/TaskLinks/{linkId}": {
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Deletes a Task Link",
        "operationId": "DeleteTaskLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Task's ID (TASK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "A Task Link's ID (TASK_LINK_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have access to Task."
          },
          "404": {
            "description": "Task or Task Link not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/TeamMembers": {
      "get": {
        "tags": [
          "TeamMembers"
        ],
        "summary": "Gets a list of Team Members",
        "operationId": "GetTeamMembers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of team members to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of team members to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "TeamMember",
                "required": [
                  "MEMBER_USER_ID"
                ],
                "type": "object",
                "properties": {
                  "PERMISSION_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "MEMBER_USER_ID": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "TeamMembers"
        ],
        "summary": "Adds a new Team Member",
        "description": "Note: Team Members of Anonymous Teams can only be created via the /Teams endpoint.",
        "operationId": "AddTeamMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiTeamMember",
            "in": "body",
            "description": "The Team Member to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITeamMember"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Team Member added.",
            "schema": {
              "title": "TeamMember",
              "required": [
                "MEMBER_USER_ID"
              ],
              "type": "object",
              "properties": {
                "PERMISSION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "MEMBER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to add Teams Members."
          }
        },
        "deprecated": false
      }
    },
    "/TeamMembers/{id}": {
      "get": {
        "tags": [
          "TeamMembers"
        ],
        "summary": "Gets a Team Member",
        "description": "",
        "operationId": "GetTeamMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Team Member's ID (PERMISSION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "TeamMember",
              "required": [
                "MEMBER_USER_ID"
              ],
              "type": "object",
              "properties": {
                "PERMISSION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "MEMBER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "404": {
            "description": "Team Member not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "TeamMembers"
        ],
        "summary": "Deletes a Team Member",
        "description": "Note: Team Members of Anonymous Teams can only be deleted via the /Teams endpoint.",
        "operationId": "DeleteTeamMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Team Member's ID (PERMISSION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Authentication failed."
          },
          "403": {
            "description": "API User does not have permission to delete Teams Members."
          },
          "404": {
            "description": "Team Member not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Teams/Search": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Gets a filtered list of Teams.",
        "description": "Only one optional parameter (excluding brief, top, skip and count_total) can be specified. Simple object graphs (excluding TEAMMEMBERS) are returned if \"brief=true\" is used in the query string.             <br /> The API responses may contain two types of Teams: a) regular Teams configured via System Settings and b) so called Anonymous Teams which are created by the system when you set a record permission visible to Individuals.            You can differentiate these two types on Teams by the ANONYMOUS_TEAM property. Anonymous Teams are a bit more restricted when it comes to modifying them via the API, they can only be created/updated/deleted via the /Teams endpoint.",
        "operationId": "GetTeamsBySearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "team_name",
            "in": "query",
            "description": "Optional, name of the team.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when team was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the team.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of teams to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of teams to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Team",
                "type": "object",
                "properties": {
                  "TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TEAM_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ANONYMOUS_TEAM": {
                    "type": "boolean"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "TEAMMEMBERS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITeamMember"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Invalid api key provided."
          }
        },
        "deprecated": false
      }
    },
    "/Teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Gets a list of Teams.",
        "description": "Simple object graphs (excluding TEAMMEMBERS) are returned if \"brief=true\" is used in the query string.            <br /> The API responses may contain two types of Teams: a) regular Teams configured via System Settings and b) so called Anonymous Teams which are created by the system when you set a record permission visible to Individuals.            You can differentiate these two types on Teams by the ANONYMOUS_TEAM property. Anonymous Teams are a bit more restricted when it comes to modifying them via the API, they can only be created/updated/deleted via the root /Teams endpoint.",
        "operationId": "GetTeams",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if response should only contain top level properties of the team.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of teams to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of teams to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "Team",
                "type": "object",
                "properties": {
                  "TEAM_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "TEAM_NAME": {
                    "maxLength": 255,
                    "minLength": 0,
                    "type": "string"
                  },
                  "ANONYMOUS_TEAM": {
                    "type": "boolean"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "TEAMMEMBERS": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/APITeamMember"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Invalid api key provided."
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Updates a Team",
        "description": "When updating Anonymous Teams, the brief parameter has no effect and you must include all the Team Members that should be part of the team. A minimum of one Team Member is required.  For more details, please refer to GET /Teams above.",
        "operationId": "UpdateTeam",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiTeam",
            "in": "body",
            "description": "The Team to update (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITeam"
            }
          },
          {
            "name": "brief",
            "in": "query",
            "description": "Optional, true if you wish to do a partial update containing only top level properties of the Team. When true, all sub-collections are ignored.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Team updated.",
            "schema": {
              "title": "Team",
              "type": "object",
              "properties": {
                "TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TEAM_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ANONYMOUS_TEAM": {
                  "type": "boolean"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "TEAMMEMBERS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITeamMember"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Invalid api key provided."
          },
          "404": {
            "description": "Team not found."
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Adds a Team",
        "description": "TEAM_NAME is required when creating a Team with ANONYMOUS_TEAM set to \"false\". When creating Anonymous Teams, e.g. ANONYMOUS_TEAM=true, you must include all the Team Members that should be part of the team. A minimum of one Team Member is required.             For more details, please refer to GET /Teams above.",
        "operationId": "AddTeam",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "apiTeam",
            "in": "body",
            "description": "The Team to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITeam"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Team added.",
            "schema": {
              "title": "Team",
              "type": "object",
              "properties": {
                "TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TEAM_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ANONYMOUS_TEAM": {
                  "type": "boolean"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "TEAMMEMBERS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITeamMember"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Invalid api key provided."
          }
        },
        "deprecated": false
      }
    },
    "/Teams/{id}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Gets a Team",
        "description": "",
        "operationId": "GetTeam",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Team's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "Team",
              "type": "object",
              "properties": {
                "TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TEAM_NAME": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string"
                },
                "ANONYMOUS_TEAM": {
                  "type": "boolean"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "TEAMMEMBERS": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/APITeamMember"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Invalid api key provided."
          },
          "404": {
            "description": "Team not found."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Deletes a Team",
        "description": "",
        "operationId": "DeleteTeam",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Team's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Invalid api key provided."
          },
          "404": {
            "description": "Team not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Teams/{id}/TeamMembers": {
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Adds a Team Member",
        "operationId": "AddTeamMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Team's ID (TEAM_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "apiTeamMember",
            "in": "body",
            "description": "The Team Member to add (just include JSON object as request body)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/APITeamMember"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Team Member added.",
            "schema": {
              "title": "TeamMember",
              "required": [
                "MEMBER_USER_ID"
              ],
              "type": "object",
              "properties": {
                "PERMISSION_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "TEAM_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "MEMBER_USER_ID": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Data validation error."
          },
          "401": {
            "description": "Invalid api key provided."
          },
          "404": {
            "description": "Team not found."
          }
        },
        "deprecated": false
      }
    },
    "/Teams/{id}/TeamMembers/{permissionId}": {
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Deletes a Team Member",
        "operationId": "DeleteTeamMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Team's ID (TEAM_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "A Team Members's ID (PERMISSION_ID)",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete succeeded."
          },
          "401": {
            "description": "Invalid api key provided."
          },
          "404": {
            "description": "Team or Team Member not found."
          },
          "417": {
            "description": "Delete failed."
          }
        },
        "deprecated": false
      }
    },
    "/Users/Me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the User object for the calling user.",
        "description": "This read only endpoint returns the details for the currently authenticated user on an Insightly instance, same fields as            returned by the /Users endpoint, but only for a single identified user.",
        "operationId": "GetUserMe",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "$ref": "#/definitions/APIUser"
            }
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Users/Search": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a filtered list of Users",
        "description": "This is a read only endpoint that returns a list of users associated with an Insightly instance.            Use this endpoint when you need to obtain a list of valid USER_IDs, for example, when you want to assign            a task to a specific user (do not confuse the USER_ID with their CONTACT_ID). Only one optional parameter (excluding top, skip and count_total) can be specified.",
        "operationId": "GetUsersBySearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "first_name",
            "in": "query",
            "description": "Optional, first name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Optional, last name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Optional, user's email address.",
            "required": false,
            "type": "string"
          },
          {
            "name": "updated_after_utc",
            "in": "query",
            "description": "Optional, earliest date when note was last updated.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of users to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of users to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "User",
                "type": "object",
                "properties": {
                  "USER_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "CONTACT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FIRST_NAME": {
                    "type": "string"
                  },
                  "LAST_NAME": {
                    "type": "string"
                  },
                  "TIMEZONE_ID": {
                    "type": "string"
                  },
                  "EMAIL_ADDRESS": {
                    "type": "string"
                  },
                  "EMAIL_DROPBOX_IDENTIFIER": {
                    "type": "string"
                  },
                  "EMAIL_DROPBOX_ADDRESS": {
                    "type": "string"
                  },
                  "ADMINISTRATOR": {
                    "type": "boolean"
                  },
                  "ACCOUNT_OWNER": {
                    "type": "boolean"
                  },
                  "ACTIVE": {
                    "type": "boolean"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "USER_CURRENCY": {
                    "type": "string"
                  },
                  "CONTACT_DISPLAY": {
                    "type": "string"
                  },
                  "CONTACT_ORDER": {
                    "type": "string"
                  },
                  "TASK_WEEK_START": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "INSTANCE_ID": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    },
    "/Users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a User",
        "description": "This read only endpoint returns the details for a specific user on an Insightly instance, same fields as            returned by the /Users endpoint, but only for a single identified user.",
        "operationId": "GetUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A User's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "title": "User",
              "type": "object",
              "properties": {
                "USER_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "CONTACT_ID": {
                  "format": "int64",
                  "type": "integer"
                },
                "FIRST_NAME": {
                  "type": "string"
                },
                "LAST_NAME": {
                  "type": "string"
                },
                "TIMEZONE_ID": {
                  "type": "string"
                },
                "EMAIL_ADDRESS": {
                  "type": "string"
                },
                "EMAIL_DROPBOX_IDENTIFIER": {
                  "type": "string"
                },
                "EMAIL_DROPBOX_ADDRESS": {
                  "type": "string"
                },
                "ADMINISTRATOR": {
                  "type": "boolean"
                },
                "ACCOUNT_OWNER": {
                  "type": "boolean"
                },
                "ACTIVE": {
                  "type": "boolean"
                },
                "DATE_CREATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "DATE_UPDATED_UTC": {
                  "format": "date-time",
                  "type": "string"
                },
                "USER_CURRENCY": {
                  "type": "string"
                },
                "CONTACT_DISPLAY": {
                  "type": "string"
                },
                "CONTACT_ORDER": {
                  "type": "string"
                },
                "TASK_WEEK_START": {
                  "format": "int32",
                  "type": "integer"
                },
                "INSTANCE_ID": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          },
          "404": {
            "description": "User not found."
          }
        },
        "deprecated": false
      }
    },
    "/Users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a list of Users",
        "description": "This is a read only endpoint that returns a list of users associated with an Insightly instance.            Use this endpoint when you need to obtain a list of valid USER_IDs, for example, when you want to assign            a task to a specific user (do not confuse the USER_ID with their CONTACT_ID).",
        "operationId": "GetUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Optional, number of users to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "top",
            "in": "query",
            "description": "Optional, maximum number of users to return in the response.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "count_total",
            "in": "query",
            "description": "Optional, true if total number of records should be returned in the response headers.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Request succeeded.",
            "schema": {
              "type": "array",
              "items": {
                "title": "User",
                "type": "object",
                "properties": {
                  "USER_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "CONTACT_ID": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "FIRST_NAME": {
                    "type": "string"
                  },
                  "LAST_NAME": {
                    "type": "string"
                  },
                  "TIMEZONE_ID": {
                    "type": "string"
                  },
                  "EMAIL_ADDRESS": {
                    "type": "string"
                  },
                  "EMAIL_DROPBOX_IDENTIFIER": {
                    "type": "string"
                  },
                  "EMAIL_DROPBOX_ADDRESS": {
                    "type": "string"
                  },
                  "ADMINISTRATOR": {
                    "type": "boolean"
                  },
                  "ACCOUNT_OWNER": {
                    "type": "boolean"
                  },
                  "ACTIVE": {
                    "type": "boolean"
                  },
                  "DATE_CREATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "DATE_UPDATED_UTC": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "USER_CURRENCY": {
                    "type": "string"
                  },
                  "CONTACT_DISPLAY": {
                    "type": "string"
                  },
                  "CONTACT_ORDER": {
                    "type": "string"
                  },
                  "TASK_WEEK_START": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "INSTANCE_ID": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Often missing or invalid parameter."
          },
          "401": {
            "description": "Authentication failed."
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "APIActivitySet": {
      "title": "ActivitySet",
      "type": "object",
      "properties": {
        "ACTIVITYSET_ID": {
          "format": "int64",
          "type": "integer"
        },
        "NAME": {
          "type": "string"
        },
        "FOR_CONTACTS": {
          "type": "boolean"
        },
        "FOR_ORGANISATIONS": {
          "type": "boolean"
        },
        "FOR_OPPORTUNITIES": {
          "type": "boolean"
        },
        "FOR_PROJECTS": {
          "type": "boolean"
        },
        "FOR_LEADS": {
          "type": "boolean"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "ACTIVITIES": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIActivity"
          }
        }
      }
    },
    "APIActivity": {
      "title": "Activity",
      "type": "object",
      "properties": {
        "ACTIVITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "ACTIVITYSET_ID": {
          "format": "int64",
          "type": "integer"
        },
        "ACTIVITY_NAME": {
          "type": "string"
        },
        "ACTIVITY_DETAILS": {
          "type": "string"
        },
        "ACTIVITY_TYPE": {
          "type": "string"
        },
        "CATEGORY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "REMINDER": {
          "type": "boolean"
        },
        "REMINDER_DAYS_BEFORE_DUE": {
          "format": "int32",
          "type": "integer"
        },
        "REMINDER_TIME": {
          "type": "string"
        },
        "PUBLICLY_VISIBLE": {
          "type": "boolean"
        },
        "OWNER_VISIBLE": {
          "type": "boolean"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "RESPONSIBLE_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "ASSIGNED_TEAM_ID": {
          "format": "int64",
          "type": "integer"
        },
        "SKIP_SUN": {
          "type": "boolean"
        },
        "SKIP_MON": {
          "type": "boolean"
        },
        "SKIP_TUE": {
          "type": "boolean"
        },
        "SKIP_WED": {
          "type": "boolean"
        },
        "SKIP_THU": {
          "type": "boolean"
        },
        "SKIP_FRI": {
          "type": "boolean"
        },
        "SKIP_SAT": {
          "type": "boolean"
        },
        "DUE_DAYS_AFTER_START": {
          "format": "int32",
          "type": "integer"
        },
        "DUE_DAYS_BEFORE_END": {
          "format": "int32",
          "type": "integer"
        },
        "EVENT_DAYS_AFTER_START": {
          "format": "int32",
          "type": "integer"
        },
        "EVENT_DAYS_BEFORE_END": {
          "format": "int32",
          "type": "integer"
        },
        "EVENT_TIME": {
          "type": "string"
        },
        "ALL_DAY": {
          "type": "boolean"
        },
        "DURATION": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "APIComment": {
      "title": "Comment",
      "type": "object",
      "properties": {
        "COMMENT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "BODY": {
          "type": "string"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "NOTE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "EMAIL_ID": {
          "format": "int64",
          "type": "integer"
        },
        "TASK_ID": {
          "format": "int64",
          "type": "integer"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "CAN_EDIT": {
          "type": "boolean"
        },
        "CAN_DELETE": {
          "type": "boolean"
        }
      }
    },
    "APIFileAttachment": {
      "title": "FileAttachment",
      "required": [
        "FILE_NAME",
        "CONTENT_TYPE"
      ],
      "type": "object",
      "properties": {
        "FILE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "FILE_NAME": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "CONTENT_TYPE": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "FILE_SIZE": {
          "format": "int64",
          "type": "integer"
        },
        "FILE_CATEGORY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "URL": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "CAN_EDIT": {
          "type": "boolean"
        },
        "CAN_DELETE": {
          "type": "boolean"
        }
      }
    },
    "APIFile": {
      "title": "File",
      "required": [
        "FILE_NAME",
        "CONTENT_TYPE"
      ],
      "type": "object",
      "properties": {
        "FILE_NAME": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "CONTENT_TYPE": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "FILE_CATEGORY_ID": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "APIContact": {
      "title": "Contact",
      "type": "object",
      "properties": {
        "CONTACT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "SALUTATION": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "FIRST_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "LAST_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "BACKGROUND": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "IMAGE_URL": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "DEFAULT_LINKED_ORGANISATION": {
          "format": "int64",
          "type": "integer"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "VISIBLE_TO": {
          "type": "string"
        },
        "VISIBLE_TEAM_ID": {
          "format": "int64",
          "type": "integer"
        },
        "VISIBLE_USER_IDS": {
          "type": "string"
        },
        "CUSTOMFIELDS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APICustomField"
          }
        },
        "ADDRESSES": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIAddress"
          }
        },
        "CONTACTINFOS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIContactInfo"
          }
        },
        "DATES": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIContactDate"
          }
        },
        "TAGS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APITag"
          }
        },
        "LINKS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APILink"
          }
        },
        "CONTACTLINKS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIContactLink"
          }
        },
        "CAN_EDIT": {
          "type": "boolean"
        },
        "CAN_DELETE": {
          "type": "boolean"
        },
        "SOCIAL_LINKEDIN": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "SOCIAL_FACEBOOK": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "SOCIAL_TWITTER": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "ASSISTANT_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "APICustomField": {
      "title": "CustomField",
      "type": "object",
      "properties": {
        "CUSTOM_FIELD_ID": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "FIELD_VALUE": {
          "type": "object"
        }
      }
    },
    "APIAddress": {
      "title": "Address",
      "required": [
        "ADDRESS_TYPE"
      ],
      "type": "object",
      "properties": {
        "ADDRESS_ID": {
          "format": "int64",
          "type": "integer"
        },
        "ADDRESS_TYPE": {
          "type": "string"
        },
        "STREET": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "CITY": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "STATE": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "POSTCODE": {
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "COUNTRY": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "APIContactInfo": {
      "title": "ContactInfo",
      "required": [
        "TYPE",
        "DETAIL"
      ],
      "type": "object",
      "properties": {
        "CONTACT_INFO_ID": {
          "format": "int64",
          "type": "integer"
        },
        "TYPE": {
          "type": "string"
        },
        "SUBTYPE": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "LABEL": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "DETAIL": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "APIContactDate": {
      "title": "ContactDate",
      "type": "object",
      "properties": {
        "DATE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OCCASION_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "OCCASION_DATE": {
          "format": "date-time",
          "type": "string"
        },
        "REPEAT_YEARLY": {
          "type": "boolean"
        },
        "CREATE_TASK_YEARLY": {
          "type": "boolean"
        }
      }
    },
    "APITag": {
      "title": "Tag",
      "type": "object",
      "properties": {
        "TAG_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "APILink": {
      "title": "Link",
      "type": "object",
      "properties": {
        "LINK_ID": {
          "format": "int64",
          "type": "integer"
        },
        "CONTACT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OPPORTUNITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "ORGANISATION_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PROJECT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "SECOND_PROJECT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "SECOND_OPPORTUNITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "ROLE": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "DETAILS": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "APIContactLink": {
      "title": "ContactLink",
      "type": "object",
      "properties": {
        "CONTACT_LINK_ID": {
          "format": "int64",
          "type": "integer"
        },
        "FIRST_CONTACT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "SECOND_CONTACT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "RELATIONSHIP_ID": {
          "format": "int64",
          "type": "integer"
        },
        "DETAILS": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "APICalendarEvent": {
      "title": "CalendarEvent",
      "required": [
        "TITLE",
        "START_DATE_UTC",
        "END_DATE_UTC"
      ],
      "type": "object",
      "properties": {
        "EVENT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "TITLE": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "LOCATION": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "DETAILS": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "START_DATE_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "END_DATE_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "ALL_DAY": {
          "type": "boolean"
        },
        "PUBLICLY_VISIBLE": {
          "type": "boolean"
        },
        "REMINDER_DATE_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "REMINDER_SENT": {
          "type": "boolean"
        },
        "EVENTLINKS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIEventLink"
          }
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "CAN_EDIT": {
          "type": "boolean"
        },
        "CAN_DELETE": {
          "type": "boolean"
        }
      }
    },
    "APIEventLink": {
      "title": "EventLink",
      "type": "object",
      "properties": {
        "EVENT_LINK_ID": {
          "format": "int64",
          "type": "integer"
        },
        "EVENT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "CONTACT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "ORGANISATION_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OPPORTUNITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PROJECT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "LEAD_ID": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "APINote": {
      "title": "Note",
      "required": [
        "TITLE",
        "LINK_SUBJECT_ID",
        "LINK_SUBJECT_TYPE"
      ],
      "type": "object",
      "properties": {
        "NOTE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "TITLE": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "BODY": {
          "type": "string"
        },
        "LINK_SUBJECT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "LINK_SUBJECT_TYPE": {
          "type": "string"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "VISIBLE_TO": {
          "type": "string"
        },
        "VISIBLE_TEAM_ID": {
          "format": "int64",
          "type": "integer"
        },
        "VISIBLE_USER_IDS": {
          "type": "string"
        },
        "NOTELINKS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APINoteLink"
          }
        },
        "CAN_EDIT": {
          "type": "boolean"
        },
        "CAN_DELETE": {
          "type": "boolean"
        }
      }
    },
    "APINoteLink": {
      "title": "NoteLink",
      "type": "object",
      "properties": {
        "NOTE_LINK_ID": {
          "format": "int64",
          "type": "integer"
        },
        "NOTE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "CONTACT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "ORGANISATION_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OPPORTUNITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PROJECT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "LEAD_ID": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "APIFollow": {
      "title": "Follow",
      "type": "object",
      "properties": {
        "FOLLOWING": {
          "type": "boolean"
        }
      }
    },
    "APIActivitySetAssignment": {
      "title": "ActivitySetAssignment",
      "type": "object",
      "properties": {
        "ACTIVITYSET_ID": {
          "format": "int64",
          "type": "integer"
        },
        "START_DATE": {
          "format": "date-time",
          "type": "string"
        },
        "END_DATE": {
          "format": "date-time",
          "type": "string"
        },
        "ACTIVITY_ASSIGNMENTS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIActivityAssignment"
          }
        }
      }
    },
    "APIActivityAssignment": {
      "title": "ActivityAssignment",
      "type": "object",
      "properties": {
        "ACTIVITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "RESPONSIBLE_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "ASSIGNED_TEAM_ID": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "APIEmail": {
      "title": "Email",
      "type": "object",
      "properties": {
        "EMAIL_ID": {
          "format": "int64",
          "type": "integer"
        },
        "GMAIL_MESSAGE_ID": {
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        },
        "EMAIL_DATE_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "EMAIL_FROM": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "EMAIL_TO": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "EMAIL_CC": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "SUBJECT": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "BODY": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "BODY_EXTRACT": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "FORMAT": {
          "maxLength": 5,
          "minLength": 0,
          "type": "string"
        },
        "SIZE": {
          "format": "int64",
          "type": "integer"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "VISIBLE_TO": {
          "type": "string"
        },
        "VISIBLE_TEAM_ID": {
          "format": "int64",
          "type": "integer"
        },
        "VISIBLE_USER_IDS": {
          "type": "string"
        },
        "EMAILLINKS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIEmailLink"
          }
        },
        "TAGS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APITag"
          }
        },
        "CAN_EDIT": {
          "type": "boolean"
        },
        "CAN_DELETE": {
          "type": "boolean"
        }
      }
    },
    "APIEmailLink": {
      "title": "EmailLink",
      "type": "object",
      "properties": {
        "EMAIL_LINK_ID": {
          "format": "int64",
          "type": "integer"
        },
        "EMAIL_ID": {
          "format": "int64",
          "type": "integer"
        },
        "CONTACT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "ORGANISATION_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OPPORTUNITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PROJECT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "LEAD_ID": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "APITask": {
      "title": "Task",
      "required": [
        "TITLE",
        "PUBLICLY_VISIBLE",
        "COMPLETED"
      ],
      "type": "object",
      "properties": {
        "TASK_ID": {
          "format": "int64",
          "type": "integer"
        },
        "TITLE": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "CATEGORY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "DUE_DATE": {
          "format": "date-time",
          "type": "string"
        },
        "COMPLETED_DATE_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "PUBLICLY_VISIBLE": {
          "type": "boolean"
        },
        "COMPLETED": {
          "type": "boolean"
        },
        "PROJECT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OPPORTUNITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "MILESTONE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PIPELINE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "STAGE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "DETAILS": {
          "type": "string"
        },
        "STATUS": {
          "type": "string"
        },
        "PRIORITY": {
          "format": "int32",
          "type": "integer"
        },
        "PERCENT_COMPLETE": {
          "format": "int32",
          "type": "integer"
        },
        "START_DATE": {
          "format": "date-time",
          "type": "string"
        },
        "ASSIGNED_BY_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "PARENT_TASK_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OWNER_VISIBLE": {
          "type": "boolean"
        },
        "RESPONSIBLE_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "ASSIGNED_TEAM_ID": {
          "format": "int64",
          "type": "integer"
        },
        "ASSIGNED_DATE_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "REMINDER_DATE_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "REMINDER_SENT": {
          "type": "boolean"
        },
        "RECURRENCE": {
          "type": "string"
        },
        "TASKLINKS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APITaskLink"
          }
        },
        "CAN_EDIT": {
          "type": "boolean"
        },
        "CAN_DELETE": {
          "type": "boolean"
        }
      }
    },
    "APITaskLink": {
      "title": "TaskLink",
      "type": "object",
      "properties": {
        "TASK_LINK_ID": {
          "format": "int64",
          "type": "integer"
        },
        "TASK_ID": {
          "format": "int64",
          "type": "integer"
        },
        "CONTACT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "ORGANISATION_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OPPORTUNITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PROJECT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "LEAD_ID": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "APICountry": {
      "title": "Country",
      "type": "object",
      "properties": {
        "COUNTRY_NAME": {
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "APICurrency": {
      "title": "Currency",
      "type": "object",
      "properties": {
        "CURRENCY_CODE": {
          "maxLength": 3,
          "minLength": 0,
          "type": "string"
        },
        "CURRENCY_SYMBOL": {
          "maxLength": 10,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "APICustomFieldGroup": {
      "title": "CustomFieldGroup",
      "type": "object",
      "properties": {
        "GROUP_ID": {
          "format": "int64",
          "type": "integer"
        },
        "GROUP_NAME": {
          "type": "string"
        },
        "GROUP_FOR": {
          "type": "string"
        },
        "GROUP_ORDER": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "APICustomFieldMetadata": {
      "title": "CustomFieldMetadata",
      "required": [
        "CUSTOM_FIELD_ID",
        "ORDER_ID",
        "FIELD_FOR",
        "FIELD_NAME",
        "FIELD_TYPE"
      ],
      "type": "object",
      "properties": {
        "CUSTOM_FIELD_ID": {
          "type": "string"
        },
        "ORDER_ID": {
          "format": "int64",
          "type": "integer"
        },
        "FIELD_FOR": {
          "maxLength": 12,
          "minLength": 0,
          "type": "string"
        },
        "FIELD_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "FIELD_TYPE": {
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        },
        "FIELD_HELP_TEXT": {
          "maxLength": 1000,
          "minLength": 0,
          "type": "string"
        },
        "DEFAULT_VALUE": {
          "type": "object"
        },
        "GROUP_ID": {
          "format": "int64",
          "type": "integer"
        },
        "EDITABLE": {
          "type": "boolean"
        },
        "VISIBLE": {
          "type": "boolean"
        },
        "CUSTOM_FIELD_OPTIONS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APICustomFieldOption"
          }
        }
      }
    },
    "APICustomFieldOption": {
      "title": "CustomFieldOption",
      "required": [
        "OPTION_VALUE",
        "OPTION_DEFAULT"
      ],
      "type": "object",
      "properties": {
        "OPTION_ID": {
          "format": "int32",
          "type": "integer"
        },
        "OPTION_VALUE": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "OPTION_DEFAULT": {
          "type": "boolean"
        }
      }
    },
    "APICategory": {
      "title": "Category",
      "required": [
        "CATEGORY_NAME",
        "BACKGROUND_COLOR"
      ],
      "type": "object",
      "properties": {
        "CATEGORY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "CATEGORY_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "ACTIVE": {
          "type": "boolean"
        },
        "BACKGROUND_COLOR": {
          "maxLength": 6,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "APIUserFollow": {
      "title": "UserFollow",
      "type": "object",
      "properties": {
        "RECORD_TYPE": {
          "type": "string"
        },
        "RECORD_ID": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "APIInstance": {
      "title": "Instance",
      "type": "object",
      "properties": {
        "INSTANCE_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "INSTANCE_SUBDOMAIN": {
          "type": "string"
        },
        "PLAN_NAME": {
          "type": "string"
        }
      }
    },
    "APILead": {
      "title": "Lead",
      "required": [
        "LAST_NAME"
      ],
      "type": "object",
      "properties": {
        "LEAD_ID": {
          "format": "int64",
          "type": "integer"
        },
        "SALUTATION": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "TITLE": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "FIRST_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "LAST_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "ORGANIZATION_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "PHONE_NUMBER": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "MOBILE_PHONE_NUMBER": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "FAX_NUMBER": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "EMAIL_ADDRESS": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "WEBSITE_URL": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "CONVERTED": {
          "type": "boolean"
        },
        "CONVERTED_DATE_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "CONVERTED_CONTACT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "CONVERTED_ORGANIZATION_ID": {
          "format": "int64",
          "type": "integer"
        },
        "CONVERTED_OPPORTUNITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "VISIBLE_TO": {
          "type": "string"
        },
        "RESPONSIBLE_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "INDUSTRY": {
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "LEAD_STATUS_ID": {
          "format": "int64",
          "type": "integer"
        },
        "LEAD_SOURCE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "VISIBLE_TEAM_ID": {
          "format": "int64",
          "type": "integer"
        },
        "EMPLOYEE_COUNT": {
          "format": "int32",
          "type": "integer"
        },
        "LEAD_RATING": {
          "format": "int32",
          "type": "integer"
        },
        "LEAD_DESCRIPTION": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "VISIBLE_USER_IDS": {
          "type": "string"
        },
        "CUSTOMFIELDS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APICustomField"
          }
        },
        "ADDRESS_STREET": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "ADDRESS_CITY": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "ADDRESS_STATE": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "ADDRESS_POSTCODE": {
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "ADDRESS_COUNTRY": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "TAGS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APITag"
          }
        },
        "IMAGE_URL": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "CAN_EDIT": {
          "type": "boolean"
        },
        "CAN_DELETE": {
          "type": "boolean"
        }
      }
    },
    "APILinkEmailAddress": {
      "title": "LinkEmailAddress",
      "type": "object",
      "properties": {
        "EMAIL": {
          "type": "string"
        }
      }
    },
    "APILeadSource": {
      "title": "LeadSource",
      "required": [
        "LEAD_SOURCE"
      ],
      "type": "object",
      "properties": {
        "LEAD_SOURCE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "LEAD_SOURCE": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "DEFAULT_VALUE": {
          "type": "boolean"
        },
        "FIELD_ORDER": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "APILeadStatus": {
      "title": "LeadStatus",
      "required": [
        "LEAD_STATUS"
      ],
      "type": "object",
      "properties": {
        "LEAD_STATUS_ID": {
          "format": "int64",
          "type": "integer"
        },
        "LEAD_STATUS": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "DEFAULT_STATUS": {
          "type": "boolean"
        },
        "STATUS_TYPE": {
          "format": "int32",
          "type": "integer"
        },
        "FIELD_ORDER": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "APIMilestone": {
      "title": "Milestone",
      "type": "object",
      "properties": {
        "MILESTONE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PROJECT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "TITLE": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "DUE_DATE": {
          "format": "date-time",
          "type": "string"
        },
        "COMPLETED": {
          "type": "boolean"
        },
        "COMPLETED_DATE_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "RESPONSIBLE_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "APIOpportunity": {
      "title": "Opportunity",
      "required": [
        "OPPORTUNITY_STATE"
      ],
      "type": "object",
      "properties": {
        "OPPORTUNITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OPPORTUNITY_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "OPPORTUNITY_DETAILS": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "PROBABILITY": {
          "format": "int32",
          "type": "integer"
        },
        "BID_CURRENCY": {
          "type": "string"
        },
        "BID_AMOUNT": {
          "format": "int64",
          "type": "integer"
        },
        "BID_TYPE": {
          "type": "string"
        },
        "BID_DURATION": {
          "format": "int32",
          "type": "integer"
        },
        "OPPORTUNITY_VALUE": {
          "format": "int64",
          "type": "integer"
        },
        "FORECAST_CLOSE_DATE": {
          "format": "date-time",
          "type": "string"
        },
        "ACTUAL_CLOSE_DATE": {
          "format": "date-time",
          "type": "string"
        },
        "CATEGORY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PIPELINE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "STAGE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OPPORTUNITY_STATE": {
          "type": "string"
        },
        "OPPORTUNITY_STATE_REASON_ID": {
          "format": "int64",
          "type": "integer"
        },
        "IMAGE_URL": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "RESPONSIBLE_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "VISIBLE_TO": {
          "type": "string"
        },
        "VISIBLE_TEAM_ID": {
          "format": "int64",
          "type": "integer"
        },
        "VISIBLE_USER_IDS": {
          "type": "string"
        },
        "CUSTOMFIELDS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APICustomField"
          }
        },
        "TAGS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APITag"
          }
        },
        "LINKS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APILink"
          }
        },
        "CAN_EDIT": {
          "type": "boolean"
        },
        "CAN_DELETE": {
          "type": "boolean"
        }
      }
    },
    "APIPipelineChange": {
      "title": "PipelineChange",
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PIPELINE_STAGE_CHANGE": {
          "$ref": "#/definitions/APIPipelineStageChange"
        }
      }
    },
    "APIPipelineStageChange": {
      "title": "PipelineStageChange",
      "type": "object",
      "properties": {
        "STAGE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "ACTIVITYSET_ASSIGNMENT": {
          "$ref": "#/definitions/APIActivitySetAssignment"
        }
      }
    },
    "APIOpportunityState": {
      "title": "OpportunityState",
      "type": "object",
      "properties": {
        "OPPORTUNITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "DATE_CHANGED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "FOR_OPPORTUNITY_STATE": {
          "type": "string"
        },
        "STATE_REASON_ID": {
          "format": "int64",
          "type": "integer"
        },
        "STATE_REASON": {
          "type": "string"
        }
      }
    },
    "APIOpportunityStateReason": {
      "title": "OpportunityStateReason",
      "type": "object",
      "properties": {
        "STATE_REASON_ID": {
          "format": "int64",
          "type": "integer"
        },
        "STATE_REASON": {
          "type": "string"
        },
        "FOR_OPPORTUNITY_STATE": {
          "type": "string"
        }
      }
    },
    "APIOrganisation": {
      "title": "Organisation",
      "required": [
        "ORGANISATION_NAME"
      ],
      "type": "object",
      "properties": {
        "ORGANISATION_ID": {
          "format": "int64",
          "type": "integer"
        },
        "ORGANISATION_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "BACKGROUND": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "IMAGE_URL": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "VISIBLE_TO": {
          "type": "string"
        },
        "VISIBLE_TEAM_ID": {
          "format": "int64",
          "type": "integer"
        },
        "VISIBLE_USER_IDS": {
          "type": "string"
        },
        "CUSTOMFIELDS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APICustomField"
          }
        },
        "ADDRESSES": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIAddress"
          }
        },
        "CONTACTINFOS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIContactInfo"
          }
        },
        "DATES": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIOrganisationDate"
          }
        },
        "TAGS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APITag"
          }
        },
        "LINKS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APILink"
          }
        },
        "ORGANISATIONLINKS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIOrganisationLink"
          }
        },
        "CAN_EDIT": {
          "type": "boolean"
        },
        "CAN_DELETE": {
          "type": "boolean"
        },
        "SOCIAL_LINKEDIN": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "SOCIAL_FACEBOOK": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "SOCIAL_TWITTER": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "APIOrganisationDate": {
      "title": "OrganisationDate",
      "type": "object",
      "properties": {
        "DATE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OCCASION_NAME": {
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "OCCASION_DATE": {
          "format": "date-time",
          "type": "string"
        },
        "REPEAT_YEARLY": {
          "type": "boolean"
        },
        "CREATE_TASK_YEARLY": {
          "type": "boolean"
        }
      }
    },
    "APIOrganisationLink": {
      "title": "OrganisationLink",
      "type": "object",
      "properties": {
        "ORG_LINK_ID": {
          "format": "int64",
          "type": "integer"
        },
        "FIRST_ORGANISATION_ID": {
          "format": "int64",
          "type": "integer"
        },
        "SECOND_ORGANISATION_ID": {
          "format": "int64",
          "type": "integer"
        },
        "RELATIONSHIP_ID": {
          "format": "int64",
          "type": "integer"
        },
        "DETAILS": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "APIPermissions": {
      "title": "Permissions",
      "type": "object",
      "properties": {
        "PERMISSIONS_STATE": {
          "type": "string"
        },
        "OBJECT_PERMISSIONS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIObjectPermissions"
          }
        }
      }
    },
    "APIObjectPermissions": {
      "title": "ObjectPermissions",
      "type": "object",
      "properties": {
        "OBJECT_TYPE": {
          "type": "string"
        },
        "PERMISSIONS_STATE": {
          "type": "string"
        },
        "CAN_READ": {
          "type": "boolean"
        },
        "CAN_CREATE": {
          "type": "boolean"
        },
        "CAN_EDIT": {
          "type": "boolean"
        },
        "CAN_DELETE": {
          "type": "boolean"
        }
      }
    },
    "APIPipeline": {
      "title": "Pipeline",
      "type": "object",
      "properties": {
        "PIPELINE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PIPELINE_NAME": {
          "type": "string"
        },
        "FOR_OPPORTUNITIES": {
          "type": "boolean"
        },
        "FOR_PROJECTS": {
          "type": "boolean"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "APIPipelineStage": {
      "title": "PipelineStage",
      "type": "object",
      "properties": {
        "STAGE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PIPELINE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "STAGE_NAME": {
          "type": "string"
        },
        "STAGE_ORDER": {
          "format": "int32",
          "type": "integer"
        },
        "ACTIVITYSET_ID": {
          "format": "int64",
          "type": "integer"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "APIProject": {
      "title": "Project",
      "required": [
        "PROJECT_NAME",
        "STATUS"
      ],
      "type": "object",
      "properties": {
        "PROJECT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PROJECT_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "STATUS": {
          "type": "string"
        },
        "PROJECT_DETAILS": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "OPPORTUNITY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "STARTED_DATE": {
          "format": "date-time",
          "type": "string"
        },
        "COMPLETED_DATE": {
          "format": "date-time",
          "type": "string"
        },
        "IMAGE_URL": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "RESPONSIBLE_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "OWNER_USER_ID": {
          "format": "int32",
          "type": "integer"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "CATEGORY_ID": {
          "format": "int64",
          "type": "integer"
        },
        "PIPELINE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "STAGE_ID": {
          "format": "int64",
          "type": "integer"
        },
        "VISIBLE_TO": {
          "type": "string"
        },
        "VISIBLE_TEAM_ID": {
          "format": "int64",
          "type": "integer"
        },
        "VISIBLE_USER_IDS": {
          "type": "string"
        },
        "CUSTOMFIELDS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APICustomField"
          }
        },
        "TAGS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APITag"
          }
        },
        "LINKS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APILink"
          }
        },
        "CAN_EDIT": {
          "type": "boolean"
        },
        "CAN_DELETE": {
          "type": "boolean"
        }
      }
    },
    "APIRelationship": {
      "title": "Relationship",
      "type": "object",
      "properties": {
        "RELATIONSHIP_ID": {
          "format": "int64",
          "type": "integer"
        },
        "FORWARD_TITLE": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "FORWARD": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "REVERSE_TITLE": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "REVERSE": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "FOR_CONTACTS": {
          "maxLength": 255,
          "minLength": 0,
          "type": "boolean"
        },
        "FOR_ORGANISATIONS": {
          "maxLength": 255,
          "minLength": 0,
          "type": "boolean"
        }
      }
    },
    "APITeamMember": {
      "title": "TeamMember",
      "required": [
        "MEMBER_USER_ID"
      ],
      "type": "object",
      "properties": {
        "PERMISSION_ID": {
          "format": "int64",
          "type": "integer"
        },
        "TEAM_ID": {
          "format": "int64",
          "type": "integer"
        },
        "MEMBER_USER_ID": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "APITeam": {
      "title": "Team",
      "type": "object",
      "properties": {
        "TEAM_ID": {
          "format": "int64",
          "type": "integer"
        },
        "TEAM_NAME": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "ANONYMOUS_TEAM": {
          "type": "boolean"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "TEAMMEMBERS": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APITeamMember"
          }
        }
      }
    },
    "APIUser": {
      "title": "User",
      "type": "object",
      "properties": {
        "USER_ID": {
          "format": "int64",
          "type": "integer"
        },
        "CONTACT_ID": {
          "format": "int64",
          "type": "integer"
        },
        "FIRST_NAME": {
          "type": "string"
        },
        "LAST_NAME": {
          "type": "string"
        },
        "TIMEZONE_ID": {
          "type": "string"
        },
        "EMAIL_ADDRESS": {
          "type": "string"
        },
        "EMAIL_DROPBOX_IDENTIFIER": {
          "type": "string"
        },
        "EMAIL_DROPBOX_ADDRESS": {
          "type": "string"
        },
        "ADMINISTRATOR": {
          "type": "boolean"
        },
        "ACCOUNT_OWNER": {
          "type": "boolean"
        },
        "ACTIVE": {
          "type": "boolean"
        },
        "DATE_CREATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "DATE_UPDATED_UTC": {
          "format": "date-time",
          "type": "string"
        },
        "USER_CURRENCY": {
          "type": "string"
        },
        "CONTACT_DISPLAY": {
          "type": "string"
        },
        "CONTACT_ORDER": {
          "type": "string"
        },
        "TASK_WEEK_START": {
          "format": "int32",
          "type": "integer"
        },
        "INSTANCE_ID": {
          "format": "int64",
          "type": "integer"
        }
      }
    }
  }
}